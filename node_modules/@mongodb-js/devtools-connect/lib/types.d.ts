import type { MongoDBOIDCLogEventsMap } from '@mongodb-js/oidc-plugin';
export interface ConnectAttemptInitializedEvent {
    uri: string;
    driver: {
        name: string;
        version: string;
    };
    devtoolsConnectVersion: string;
    host: string;
}
export interface ConnectAttemptFinishedEvent {
    cryptSharedLibVersionInfo?: {
        version: bigint;
        versionStr: string;
    } | null;
}
export interface ConnectHeartbeatFailureEvent {
    connectionId: string;
    failure: Error;
    isFailFast: boolean;
    isKnownServer: boolean;
}
export interface ConnectHeartbeatSucceededEvent {
    connectionId: string;
}
export interface ConnectDnsResolutionDetail {
    query: 'TXT' | 'SRV';
    hostname: string;
    error?: string;
    wasNativelyLookedUp?: boolean;
}
export interface ConnectResolveSrvErrorEvent {
    from: string;
    error: Error;
    duringLoad: boolean;
    resolutionDetails: ConnectDnsResolutionDetail[];
}
export interface ConnectResolveSrvSucceededEvent {
    from: string;
    to: string;
    resolutionDetails: ConnectDnsResolutionDetail[];
}
export interface ConnectMissingOptionalDependencyEvent {
    name: string;
    error: Error;
}
export interface ConnectUsedSystemCAEvent {
    caCount: number;
    asyncFallbackError: Error | undefined;
}
export interface ConnectEventMap extends MongoDBOIDCLogEventsMap {
    'devtools-connect:connect-attempt-initialized': (ev: ConnectAttemptInitializedEvent) => void;
    'devtools-connect:connect-heartbeat-failure': (ev: ConnectHeartbeatFailureEvent) => void;
    'devtools-connect:connect-heartbeat-succeeded': (ev: ConnectHeartbeatSucceededEvent) => void;
    'devtools-connect:connect-fail-early': () => void;
    'devtools-connect:connect-attempt-finished': (ev: ConnectAttemptFinishedEvent) => void;
    'devtools-connect:resolve-srv-error': (ev: ConnectResolveSrvErrorEvent) => void;
    'devtools-connect:resolve-srv-succeeded': (ev: ConnectResolveSrvSucceededEvent) => void;
    'devtools-connect:missing-optional-dependency': (ev: ConnectMissingOptionalDependencyEvent) => void;
    'devtools-connect:used-system-ca': (ev: ConnectUsedSystemCAEvent) => void;
}
export type ConnectEventArgs<K extends keyof ConnectEventMap> = ConnectEventMap[K] extends (...args: infer P) => any ? P : never;
export interface ConnectLogEmitter {
    on<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
    off?<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
    once<K extends keyof ConnectEventMap>(event: K, listener: ConnectEventMap[K]): this;
    emit<K extends keyof ConnectEventMap>(event: K, ...args: ConnectEventArgs<K>): unknown;
}
