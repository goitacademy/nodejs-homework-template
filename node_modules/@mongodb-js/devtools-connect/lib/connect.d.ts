import type { ConnectLogEmitter } from './index';
import type { MongoClient, MongoClientOptions } from 'mongodb';
import type { MongoDBOIDCPlugin, MongoDBOIDCPluginOptions } from '@mongodb-js/oidc-plugin';
export declare class MongoAutoencryptionUnavailable extends Error {
    constructor();
}
export declare class DevtoolsConnectionState {
    oidcPlugin: MongoDBOIDCPlugin;
    productName: string;
    private stateShareClient;
    private stateShareServer;
    constructor(options: Pick<DevtoolsConnectOptions, 'productDocsLink' | 'productName' | 'oidc' | 'parentHandle'>, logger: ConnectLogEmitter);
    getStateShareServer(): Promise<string>;
    destroy(): Promise<void>;
}
export interface DevtoolsConnectOptions extends MongoClientOptions {
    useSystemCA?: boolean;
    productDocsLink: string;
    productName: string;
    oidc?: Omit<MongoDBOIDCPluginOptions, 'logger' | 'redirectServerRequestHandler'>;
    parentState?: DevtoolsConnectionState;
    parentHandle?: string;
}
export declare function connectMongoClient(uri: string, clientOptions: DevtoolsConnectOptions, logger: ConnectLogEmitter, MongoClientClass: typeof MongoClient): Promise<{
    client: MongoClient;
    state: DevtoolsConnectionState;
}>;
export declare function isHumanOidcFlow(uri: string, clientOptions: MongoClientOptions): boolean;
