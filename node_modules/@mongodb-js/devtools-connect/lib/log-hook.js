"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hookLogger = void 0;
const oidc_plugin_1 = require("@mongodb-js/oidc-plugin");
function hookLogger(emitter, log, contextPrefix, redactURICredentials) {
    (0, oidc_plugin_1.hookLoggerToMongoLogWriter)(emitter, log, contextPrefix);
    const { mongoLogId } = log;
    emitter.on('devtools-connect:connect-attempt-initialized', function (ev) {
        log.info('DEVTOOLS-CONNECT', mongoLogId(1000000042), `${contextPrefix}-connect`, 'Initiating connection attempt', {
            ...ev,
            uri: redactURICredentials(ev.uri)
        });
    });
    emitter.on('devtools-connect:connect-heartbeat-failure', function (ev) {
        log.warn('DEVTOOLS-CONNECT', mongoLogId(1000000034), `${contextPrefix}-connect`, 'Server heartbeat failure', {
            ...ev,
            failure: ev.failure?.message
        });
    });
    emitter.on('devtools-connect:connect-heartbeat-succeeded', function (ev) {
        log.info('DEVTOOLS-CONNECT', mongoLogId(1000000035), `${contextPrefix}-connect`, 'Server heartbeat succeeded', ev);
    });
    emitter.on('devtools-connect:connect-fail-early', function () {
        log.warn('DEVTOOLS-CONNECT', mongoLogId(1000000036), `${contextPrefix}-connect`, 'Aborting connection attempt as irrecoverable');
    });
    emitter.on('devtools-connect:connect-attempt-finished', function (ev) {
        let attr;
        if (ev.cryptSharedLibVersionInfo) {
            attr = {
                cryptSharedLibVersionInfo: {
                    version: ev.cryptSharedLibVersionInfo.version.toString(16),
                    versionStr: ev.cryptSharedLibVersionInfo.versionStr
                }
            };
        }
        log.info('DEVTOOLS-CONNECT', mongoLogId(1000000037), `${contextPrefix}-connect`, 'Connection attempt finished', attr);
    });
    emitter.on('devtools-connect:resolve-srv-error', function (ev) {
        log.error('DEVTOOLS-CONNECT', mongoLogId(1000000038), `${contextPrefix}-connect`, 'Resolving SRV record failed', {
            from: redactURICredentials(ev.from),
            error: ev.error?.message,
            duringLoad: ev.duringLoad,
            resolutionDetails: ev.resolutionDetails
        });
    });
    emitter.on('devtools-connect:resolve-srv-succeeded', function (ev) {
        log.info('DEVTOOLS-CONNECT', mongoLogId(1000000039), `${contextPrefix}-connect`, 'Resolving SRV record succeeded', {
            from: redactURICredentials(ev.from),
            to: redactURICredentials(ev.to),
            resolutionDetails: ev.resolutionDetails
        });
    });
    emitter.on('devtools-connect:missing-optional-dependency', function (ev) {
        log.error('DEVTOOLS-CONNECT', mongoLogId(1000000041), `${contextPrefix}-deps`, 'Missing optional dependency', {
            name: ev.name,
            error: ev.error.message
        });
    });
    emitter.on('devtools-connect:used-system-ca', function (ev) {
        log.info('DEVTOOLS-CONNECT', mongoLogId(1000000049), `${contextPrefix}-connect`, 'Loaded system CA list', {
            caCount: ev.caCount,
            asyncFallbackError: ev.asyncFallbackError?.message
        });
    });
}
exports.hookLogger = hookLogger;
//# sourceMappingURL=log-hook.js.map