/// <reference types="node" />
import type { MongoDBOIDCPlugin } from '@mongodb-js/oidc-plugin';
import type { DevtoolsConnectionState } from './connect';
import { Readable } from 'stream';
export declare function readSignedStream(input: Readable, signature: string | string[] | undefined, hmacKey: Uint8Array): Promise<string>;
export declare function sign(payload: Uint8Array | string, hmacKey: Uint8Array): string;
export declare abstract class RpcServer {
    private hmacKey;
    private server;
    private serverPathPrefix;
    private cleanupCallback?;
    static ctr: number;
    protected constructor(serverPathPrefix: string);
    get handle(): string;
    protected _init(): Promise<void>;
    private _serverListen;
    private _handleRequest;
    close(): Promise<void>;
    protected abstract handleRpc(content: Record<string, unknown>): Promise<Record<string, unknown>>;
}
export declare class RpcClient {
    private hmacKey;
    private serverAddress;
    constructor(handle: string);
    makeRpcCall(reqData: Record<string, unknown>): Promise<Record<string, unknown>>;
}
export declare class StateShareServer extends RpcServer {
    private state;
    private abortContexts;
    private constructor();
    static create(state: DevtoolsConnectionState): Promise<StateShareServer>;
    protected handleRpc(content: any): Promise<Record<string, unknown>>;
}
export declare class StateShareClient extends RpcClient {
    oidcPlugin: MongoDBOIDCPlugin;
    constructor(handle: string);
    private _oidcCallback;
}
