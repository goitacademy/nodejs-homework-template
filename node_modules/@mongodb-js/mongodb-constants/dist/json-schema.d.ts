declare const JSON_SCHEMA: readonly [{
    readonly name: "bsonType";
    readonly value: "bsonType";
    readonly label: "bsonType";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Accepts same string aliases used for the $type operator";
}, {
    readonly name: "enum";
    readonly value: "enum";
    readonly label: "enum";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Enumerates all possible values of the field";
}, {
    readonly name: "type";
    readonly value: "type";
    readonly label: "type";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Enumerates the possible JSON types of the field";
}, {
    readonly name: "allOf";
    readonly value: "allOf";
    readonly label: "allOf";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must match all specified schemas";
}, {
    readonly name: "anyOf";
    readonly value: "anyOf";
    readonly label: "anyOf";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must match at least one of the specified schemas";
}, {
    readonly name: "oneOf";
    readonly value: "oneOf";
    readonly label: "oneOf";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must match exactly one of the specified schemas";
}, {
    readonly name: "not";
    readonly value: "not";
    readonly label: "not";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must not match the schema";
}, {
    readonly name: "multipleOf";
    readonly value: "multipleOf";
    readonly label: "multipleOf";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must be a multiple of this value";
}, {
    readonly name: "maximum";
    readonly value: "maximum";
    readonly label: "maximum";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the maximum value of the field";
}, {
    readonly name: "exclusiveMaximum";
    readonly value: "exclusiveMaximum";
    readonly label: "exclusiveMaximum";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "If true and field is a number, maximum is an exclusive maximum";
}, {
    readonly name: "minimum";
    readonly value: "minimum";
    readonly label: "minimum";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the minimum value of the field";
}, {
    readonly name: "exclusiveMinimum";
    readonly value: "exclusiveMinimum";
    readonly label: "exclusiveMinimum";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "If true, minimum is an exclusive minimum";
}, {
    readonly name: "maxLength";
    readonly value: "maxLength";
    readonly label: "maxLength";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the maximum length of the field";
}, {
    readonly name: "minLength";
    readonly value: "minLength";
    readonly label: "minLength";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the minimum length of the field";
}, {
    readonly name: "pattern";
    readonly value: "pattern";
    readonly label: "pattern";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Field must match the regular expression";
}, {
    readonly name: "maxProperties";
    readonly value: "maxProperties";
    readonly label: "maxProperties";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the field’s maximum number of properties";
}, {
    readonly name: "minProperties";
    readonly value: "minProperties";
    readonly label: "minProperties";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the field’s minimum number of properties";
}, {
    readonly name: "required";
    readonly value: "required";
    readonly label: "required";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Object’s property set must contain all the specified elements in the array";
}, {
    readonly name: "additionalProperties";
    readonly value: "additionalProperties";
    readonly label: "additionalProperties";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "If true, additional fields are allowed";
}, {
    readonly name: "properties";
    readonly value: "properties";
    readonly label: "properties";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "A valid JSON Schema where each value is also a valid JSON Schema object";
}, {
    readonly name: "patternProperties";
    readonly value: "patternProperties";
    readonly label: "patternProperties";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "In addition to properties requirements, each property name of this object must be a valid regular expression";
}, {
    readonly name: "dependencies";
    readonly value: "dependencies";
    readonly label: "dependencies";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Describes field or schema dependencies";
}, {
    readonly name: "additionalItems";
    readonly value: "additionalItems";
    readonly label: "additionalItems";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "If an object, must be a valid JSON Schema";
}, {
    readonly name: "items";
    readonly value: "items";
    readonly label: "items";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Must be either a valid JSON Schema, or an array of valid JSON Schemas";
}, {
    readonly name: "maxItems";
    readonly value: "maxItems";
    readonly label: "maxItems";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the maximum length of array";
}, {
    readonly name: "minItems";
    readonly value: "minItems";
    readonly label: "minItems";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "Indicates the minimum length of array";
}, {
    readonly name: "uniqueItems";
    readonly value: "uniqueItems";
    readonly label: "uniqueItems";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "If true, each item in the array must be unique";
}, {
    readonly name: "title";
    readonly value: "title";
    readonly label: "title";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "A descriptive title string with no effect";
}, {
    readonly name: "description";
    readonly value: "description";
    readonly label: "description";
    readonly score: 1;
    readonly meta: "json-schema";
    readonly version: "3.6.0";
    readonly description: "A string that describes the schema and has no effect.";
}];
export { JSON_SCHEMA };
//# sourceMappingURL=json-schema.d.ts.map