declare const BSON_TYPES: readonly [{
    readonly name: "Code";
    readonly value: "Code";
    readonly label: "Code";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON Code type";
    readonly snippet: "Code('${1:code}')";
}, {
    readonly name: "ObjectId";
    readonly value: "ObjectId";
    readonly label: "ObjectId";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON ObjectId type";
    readonly snippet: "ObjectId('${1:id}')";
}, {
    readonly name: "Binary";
    readonly value: "Binary";
    readonly label: "Binary";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON Binary type";
    readonly snippet: "Binary('${1:data}', '${2:subType}')";
}, {
    readonly name: "DBRef";
    readonly value: "DBRef";
    readonly label: "DBRef";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON DBRef type";
    readonly snippet: "DBRef('${1:ns}', '${2:oid}')";
}, {
    readonly name: "Timestamp";
    readonly value: "Timestamp";
    readonly label: "Timestamp";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON Timestamp type";
    readonly snippet: "Timestamp(${1:low}, ${2:high})";
}, {
    readonly name: "NumberInt";
    readonly value: "NumberInt";
    readonly label: "NumberInt";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON 32 bit Integer type";
    readonly snippet: "NumberInt(${1:value})";
}, {
    readonly name: "NumberLong";
    readonly value: "NumberLong";
    readonly label: "NumberLong";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON 64 but Integer type";
    readonly snippet: "NumberLong(${1:value})";
}, {
    readonly name: "NumberDecimal";
    readonly value: "NumberDecimal";
    readonly label: "NumberDecimal";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "3.4.0";
    readonly description: "BSON Decimal128 type";
    readonly snippet: "NumberDecimal('${1:value}')";
}, {
    readonly name: "MaxKey";
    readonly value: "MaxKey";
    readonly label: "MaxKey";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON MaxKey type";
    readonly snippet: "MaxKey()";
}, {
    readonly name: "MinKey";
    readonly value: "MinKey";
    readonly label: "MinKey";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON MinKey type";
    readonly snippet: "MinKey()";
}, {
    readonly name: "ISODate";
    readonly value: "ISODate";
    readonly label: "ISODate";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON Date type";
    readonly snippet: "ISODate('${1:date}')";
}, {
    readonly name: "RegExp";
    readonly value: "RegExp";
    readonly label: "RegExp";
    readonly score: 1;
    readonly meta: "bson";
    readonly version: "0.0.0";
    readonly description: "BSON Regex type";
    readonly snippet: "RegExp('${1:source}', '${2:opts}')";
}];
export { BSON_TYPES };
//# sourceMappingURL=bson-types.d.ts.map