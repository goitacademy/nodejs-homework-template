import type { MongoDBOIDCLogEventsMap, OIDCAbortSignal, TypedEventEmitter } from './types';
import type { RedirectServerRequestHandler } from './api';
export interface RFC8252HTTPServerOptions {
    redirectUrl: string;
    oidcStateParam: string;
    logger?: TypedEventEmitter<MongoDBOIDCLogEventsMap>;
    redirectServerRequestHandler?: RedirectServerRequestHandler;
}
/** @internal */
export declare class RFC8252HTTPServer {
    private readonly redirectUrl;
    private readonly oidcStateParam;
    private readonly redirectServerHandler;
    private readonly logger;
    private servers;
    private clientConnections;
    private readonly expressApp;
    private readonly redirects;
    private readonly oidcParamsPromise;
    private oidcParamsResolve?;
    private oidcParamsReject?;
    private oidcParams;
    constructor(options: RFC8252HTTPServerOptions);
    private _handleSuccess;
    private _handleRedirectToExternal;
    private _handleOIDCCallback;
    private _fallbackHandler;
    /**
     * Add a redirect from a local URL served on the server to an external URL.
     */
    addRedirect(targetUrl: string): Promise<{
        localUrl: string;
        onAccessed: Promise<void>;
    }>;
    /**
     * Returns the port that this server is listening on if
     * listen() was successfully called and undefined otherwise.
     */
    get listeningPort(): number | undefined;
    /**
     * Returns the full redirectURL passed to the constructor, with
     * a possible unspecified port resolved to the actual port,
     * or undefined if this server is not listening.
     */
    get listeningRedirectUrl(): string | undefined;
    /**
     * Create HTTP servers and listen on them corresponding to the redirect URL
     * provided to the constructor.
     */
    listen(): Promise<void>;
    private createServerAndListen;
    /**
     * Returns the OIDC params as the full URL used to access them
     * (regardless of whether OIDC params were passed as URL params or not)
     */
    waitForOIDCParams(): Promise<string>;
    /**
     * Close all resources associated with this server.
     */
    close(): Promise<void>;
    /**
     * Convenience method to wait until a single successful OIDC parameter
     * request is received or abort early, and close the server in any case.
     */
    waitForOIDCParamsAndClose({ signal, }?: {
        signal?: OIDCAbortSignal;
    }): Promise<string>;
}
//# sourceMappingURL=rfc-8252-http-server.d.ts.map