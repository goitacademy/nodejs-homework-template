"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hookLoggerToMongoLogWriter = void 0;
/**
 * Connect a log event emitter instance such as the one attached to a
 * `MongoDBOIDCPlugin` instance to a log writer that follows the format
 * provided by the `mongodb-log-writer` npm package.
 *
 * @public
 */
function hookLoggerToMongoLogWriter(emitter, log, contextPrefix) {
    const { mongoLogId } = log;
    emitter.on('mongodb-oidc-plugin:local-redirect-accessed', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000001), `${contextPrefix}-oidc`, 'Local redirect accessed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:oidc-callback-accepted', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000002), `${contextPrefix}-oidc`, 'OIDC callback accepted', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:oidc-callback-rejected', (ev) => {
        log.warn('OIDC-PLUGIN', mongoLogId(1002000003), `${contextPrefix}-oidc`, 'OIDC callback rejected', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:unknown-url-accessed', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000004), `${contextPrefix}-oidc`, 'Unknown URL accessed', {
            ...ev,
            // strip away any query/search string (after ?) in the URL
            path: new URL(ev.path, 'http://dummy/').pathname,
        });
    });
    emitter.on('mongodb-oidc-plugin:local-listen-started', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000005), `${contextPrefix}-oidc`, 'Started listening on local server', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:local-listen-failed', (ev) => {
        log.error('OIDC-PLUGIN', mongoLogId(1002000006), `${contextPrefix}-oidc`, 'Failed to listen on local server', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:local-listen-succeeded', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000007), `${contextPrefix}-oidc`, 'Successfully listening on local server', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:local-server-close', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000008), `${contextPrefix}-oidc`, 'Local server closed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:open-browser', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000009), `${contextPrefix}-oidc`, 'Opening browser', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:notify-device-flow', () => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000010), `${contextPrefix}-oidc`, 'Notifying user about device flow authentication');
    });
    emitter.on('mongodb-oidc-plugin:auth-attempt-started', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000011), `${contextPrefix}-oidc`, 'Authentication attempt started', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:auth-attempt-failed', (ev) => {
        log.warn('OIDC-PLUGIN', mongoLogId(1002000012), `${contextPrefix}-oidc`, 'Authentication attempt failed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:auth-attempt-succeeded', () => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000013), `${contextPrefix}-oidc`, 'Authentication attempt succeeded');
    });
    emitter.on('mongodb-oidc-plugin:refresh-failed', (ev) => {
        log.warn('OIDC-PLUGIN', mongoLogId(1002000014), `${contextPrefix}-oidc`, 'Token refresh failed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:skip-auth-attempt', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000015), `${contextPrefix}-oidc`, 'Skipping explicit authentication attempt', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:auth-failed', (ev) => {
        log.warn('OIDC-PLUGIN', mongoLogId(1002000016), `${contextPrefix}-oidc`, 'Authentication failed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:auth-succeeded', (ev) => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000017), `${contextPrefix}-oidc`, 'Authentication succeeded', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:refresh-started', () => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000018), `${contextPrefix}-oidc`, 'Token refresh attempt started');
    });
    emitter.on('mongodb-oidc-plugin:refresh-succeeded', () => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000019), `${contextPrefix}-oidc`, 'Token refresh attempt succeeded');
    });
    emitter.on('mongodb-oidc-plugin:deserialization-failed', (ev) => {
        log.error('OIDC-PLUGIN', mongoLogId(1002000020), `${contextPrefix}-oidc`, 'State deserialization failed', {
            ...ev,
        });
    });
    emitter.on('mongodb-oidc-plugin:destroyed', () => {
        log.info('OIDC-PLUGIN', mongoLogId(1002000021), `${contextPrefix}-oidc`, 'Destroyed OIDC plugin instance');
    });
}
exports.hookLoggerToMongoLogWriter = hookLoggerToMongoLogWriter;
//# sourceMappingURL=log-hook.js.map