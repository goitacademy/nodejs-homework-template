/// <reference types="node" />
import type { OIDCAbortSignal } from './types';
export declare function throwIfAborted(signal?: OIDCAbortSignal): void;
interface AbortCheckArgs {
    signalCheck: () => void;
    signalPromise: Promise<never>;
}
export declare function withAbortCheck<T extends (abortCheck: AbortCheckArgs) => Promise<any>>(signal: OIDCAbortSignal | undefined, fn: T): Promise<ReturnType<T>>;
export declare function errorString(err: unknown): string;
export declare const AbortController: {
    new (): AbortController;
    prototype: AbortController;
};
export declare const AbortSignal: {
    new (): AbortSignal;
    prototype: AbortSignal;
    abort(reason?: any): AbortSignal;
    timeout(milliseconds: number): AbortSignal;
};
export declare function timeoutSignal(ms: number): AbortSignal;
export declare function withLock<T extends (...args: any[]) => Promise<any>>(fn: T): (...args: Parameters<T>) => ReturnType<T>;
export declare function normalizeObject<T extends object>(obj: T): T;
export declare function validateSecureHTTPUrl(url: unknown, diagnosticId: string): void;
export {};
//# sourceMappingURL=util.d.ts.map