"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalConfigPaths = exports.getStoragePaths = exports.ConfigManager = exports.ShellHomeDirectory = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const events_1 = require("events");
const service_provider_core_1 = require("@mongosh/service-provider-core");
const { EJSON } = service_provider_core_1.bson;
class ShellHomeDirectory {
    constructor(paths) {
        this.ensureExistsPromise = null;
        this.paths = paths;
    }
    async ensureExists() {
        var _a;
        (_a = this.ensureExistsPromise) !== null && _a !== void 0 ? _a : (this.ensureExistsPromise = (async () => {
            await fs_1.promises.mkdir(this.paths.shellRoamingDataPath, { recursive: true, mode: 0o700 });
            await fs_1.promises.mkdir(this.paths.shellLocalDataPath, { recursive: true, mode: 0o700 });
        })());
        return this.ensureExistsPromise;
    }
    roamingPath(subpath) {
        return path_1.default.join(this.paths.shellRoamingDataPath, subpath);
    }
    localPath(subpath) {
        return path_1.default.join(this.paths.shellLocalDataPath, subpath);
    }
    rcPath(subpath) {
        return path_1.default.join(this.paths.shellRcPath, subpath);
    }
}
exports.ShellHomeDirectory = ShellHomeDirectory;
class ConfigManager extends events_1.EventEmitter {
    constructor(shellHomeDirectory) {
        super();
        this.shellHomeDirectory = shellHomeDirectory;
        this.config = null;
    }
    path() {
        return this.shellHomeDirectory.roamingPath('config');
    }
    async generateOrReadConfig(defaultConfig) {
        await this.shellHomeDirectory.ensureExists();
        let fd;
        try {
            try {
                fd = await fs_1.promises.open(this.path(), 'r');
            }
            catch (err) {
                if ((err === null || err === void 0 ? void 0 : err.code) !== 'ENOENT') {
                    this.emit('error', err);
                    throw err;
                }
            }
            if (fd !== undefined) {
                try {
                    const config = EJSON.parse(await fd.readFile({ encoding: 'utf8' }));
                    this.emit('update-config', config);
                    return { ...defaultConfig, ...config };
                }
                catch (err) {
                    this.emit('error', err);
                    return defaultConfig;
                }
            }
            else {
                await this.writeConfigFile(defaultConfig);
                this.emit('new-config', defaultConfig);
                return defaultConfig;
            }
        }
        finally {
            await (fd === null || fd === void 0 ? void 0 : fd.close());
        }
    }
    async writeConfigFile(config) {
        await this.shellHomeDirectory.ensureExists();
        try {
            await fs_1.promises.writeFile(this.path(), EJSON.stringify(config), { mode: 0o600 });
        }
        catch (err) {
            this.emit('error', err);
            throw err;
        }
    }
}
exports.ConfigManager = ConfigManager;
function getStoragePaths() {
    var _a;
    let shellLocalDataPath;
    let shellRoamingDataPath;
    if (process.platform === 'win32') {
        const appData = process.env.APPDATA;
        const localAppData = (_a = process.env.LOCALAPPDATA) !== null && _a !== void 0 ? _a : process.env.APPDATA;
        if (localAppData && appData) {
            shellLocalDataPath = path_1.default.join(localAppData, 'mongodb', 'mongosh');
            shellRoamingDataPath = path_1.default.join(appData, 'mongodb', 'mongosh');
        }
    }
    const homedir = path_1.default.join(os_1.default.homedir(), '.mongodb', 'mongosh');
    shellLocalDataPath !== null && shellLocalDataPath !== void 0 ? shellLocalDataPath : (shellLocalDataPath = homedir);
    shellRoamingDataPath !== null && shellRoamingDataPath !== void 0 ? shellRoamingDataPath : (shellRoamingDataPath = homedir);
    return {
        shellLocalDataPath,
        shellRoamingDataPath,
        shellRcPath: os_1.default.homedir()
    };
}
exports.getStoragePaths = getStoragePaths;
function getGlobalConfigPaths() {
    const paths = [];
    if (process.env.MONGOSH_GLOBAL_CONFIG_FILE_FOR_TESTING) {
        paths.push(process.env.MONGOSH_GLOBAL_CONFIG_FILE_FOR_TESTING);
    }
    switch (process.platform) {
        case 'win32':
            if (process.execPath === process.argv[1]) {
                paths.push(path_1.default.resolve(process.execPath, '..', 'mongosh.cfg'));
            }
            return paths;
        case 'darwin':
            paths.push('/usr/local/etc/mongosh.conf');
            paths.push('/opt/homebrew/etc/mongosh.conf');
        default:
            paths.push('/etc/mongosh.conf');
            return paths;
    }
}
exports.getGlobalConfigPaths = getGlobalConfigPaths;
//# sourceMappingURL=config-directory.js.map