"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
let fipsError;
if (process.argv.includes('--tlsFIPSMode')) {
    try {
        require('crypto').setFips(1);
    }
    catch (err) {
        fipsError = err;
    }
}
const build_info_1 = require("./build-info");
const module_1 = require("module");
const crypto_1 = __importDefault(require("crypto"));
const net_1 = __importDefault(require("net"));
(async () => {
    var _a;
    if (process.env.MONGOSH_RUN_NODE_SCRIPT) {
        process.argv.splice(1, 1);
        module_1.runMain(process.argv[1]);
        return;
    }
    let repl;
    let isSingleConsoleProcess = false;
    try {
        const { parseCliArgs } = await Promise.resolve().then(() => __importStar(require('./arg-parser')));
        const { generateConnectionInfoFromCliArgs } = await Promise.resolve().then(() => __importStar(require('@mongosh/arg-parser')));
        (_a = net_1.default === null || net_1.default === void 0 ? void 0 : net_1.default.setDefaultAutoSelectFamily) === null || _a === void 0 ? void 0 : _a.call(net_1.default, true);
        const options = parseCliArgs(process.argv);
        for (const warning of options._argParseWarnings) {
            console.warn(warning);
        }
        const { version } = require('../package.json');
        if (options.tlsFIPSMode) {
            if (!fipsError && !crypto_1.default.getFips()) {
                fipsError = new Error('FIPS mode not enabled despite requested');
            }
            if (fipsError) {
                if (process.config.variables.node_shared_openssl) {
                    console.error('Could not enable FIPS mode. Please ensure that your system OpenSSL installation');
                    console.error('supports FIPS, and see the mongosh FIPS documentation for more information.');
                }
                else {
                    console.error('Could not enable FIPS mode. This mongosh installation does not appear to');
                    console.error('support FIPS. Please see the mongosh FIPS documentation for more information.');
                }
                console.error('Error details:');
                console.error(fipsError);
                process.exit(1);
            }
        }
        if (options.help) {
            const { USAGE } = await Promise.resolve().then(() => __importStar(require('./constants')));
            console.log(USAGE);
            return;
        }
        if (options.version) {
            console.log((await (0, build_info_1.buildInfo)()).version);
            return;
        }
        if (options.buildInfo) {
            console.log(JSON.stringify(await (0, build_info_1.buildInfo)({ withCryptSharedVersionInfo: true }), null, '  '));
            return;
        }
        if (options.smokeTests) {
            const { runSmokeTests } = await Promise.resolve().then(() => __importStar(require('./smoke-tests')));
            const smokeTestServer = process.env.MONGOSH_SMOKE_TEST_SERVER;
            const cryptLibraryOpts = options.cryptSharedLibPath ? [
                `--cryptSharedLibPath=${options.cryptSharedLibPath}`
            ] : [];
            if (process.execPath === process.argv[1]) {
                await runSmokeTests(smokeTestServer, process.execPath, ...cryptLibraryOpts);
            }
            else {
                await runSmokeTests(smokeTestServer, process.execPath, process.argv[1], ...cryptLibraryOpts);
            }
            return;
        }
        const [{ CliRepl }, { getStoragePaths, getGlobalConfigPaths }, { getCryptLibraryPaths }, { getTlsCertificateSelector }, { redactURICredentials }] = await Promise.all([
            await Promise.resolve().then(() => __importStar(require('./cli-repl'))),
            await Promise.resolve().then(() => __importStar(require('./config-directory'))),
            await Promise.resolve().then(() => __importStar(require('./crypt-library-paths'))),
            await Promise.resolve().then(() => __importStar(require('./tls-certificate-selector'))),
            await Promise.resolve().then(() => __importStar(require('@mongosh/history'))),
        ]);
        if (process.execPath === process.argv[1]) {
            process.removeAllListeners('warning');
        }
        if (process.env.CLEAR_SIGINT_LISTENERS) {
            process.removeAllListeners('SIGINT');
        }
        isSingleConsoleProcess = !!process.env.MONGOSH_FORCE_CONNECTION_STRING_PROMPT;
        if ((!options.connectionSpecifier &&
            process.platform === 'win32' &&
            process.stdin.isTTY &&
            process.stdout.isTTY) ||
            isSingleConsoleProcess) {
            try {
                isSingleConsoleProcess || (isSingleConsoleProcess = require('get-console-process-list')().length === 1);
            }
            catch (_b) { }
            if (isSingleConsoleProcess) {
                const result = await ask('Please enter a MongoDB connection string (Default: mongodb://localhost/): ');
                if (result.trim() !== '') {
                    options.connectionSpecifier = result.trim();
                }
            }
        }
        const connectionInfo = generateConnectionInfoFromCliArgs(options);
        connectionInfo.driverOptions = {
            ...connectionInfo.driverOptions,
            ...getTlsCertificateSelector(options.tlsCertificateSelector),
            driverInfo: { name: 'mongosh', version }
        };
        const title = `mongosh ${redactURICredentials(connectionInfo.connectionString)}`;
        process.title = title;
        setTerminalWindowTitle(title);
        const shellHomePaths = getStoragePaths();
        const globalConfigPaths = getGlobalConfigPaths();
        repl = new CliRepl({
            shellCliOptions: {
                ...options,
            },
            getCryptLibraryPaths,
            input: process.stdin,
            output: process.stdout,
            onExit: process.exit,
            shellHomePaths: shellHomePaths,
            globalConfigPaths: globalConfigPaths
        });
        await repl.start(connectionInfo.connectionString, {
            productName: 'MongoDB Shell',
            productDocsLink: 'https://www.mongodb.com/docs/mongodb-shell/',
            ...connectionInfo.driverOptions
        });
    }
    catch (e) {
        console.error(`${e === null || e === void 0 ? void 0 : e.name}: ${e === null || e === void 0 ? void 0 : e.message}`);
        if (repl !== undefined) {
            repl.bus.emit('mongosh:error', e, 'startup');
        }
        if (isSingleConsoleProcess) {
            const askcharacter = (await Promise.resolve().then(() => __importStar(require('askcharacter')))).default;
            process.stdout.write('Press any key to exit: ');
            await askcharacter({ input: process.stdin, output: process.stdout });
            process.stdout.write('\n');
        }
        process.exit(1);
    }
})();
function setTerminalWindowTitle(title) {
    var _a;
    if (!process.stdout.isTTY) {
        return;
    }
    const term = (_a = process.env.TERM) !== null && _a !== void 0 ? _a : '';
    if (/^(linux|xterm|rxvt)/.test(term)) {
        process.stdout.write(`\u001b]0;${title}\u0007`);
    }
    else if (/^screen/.test(term)) {
        process.stdout.write(`\u001bk${title}\u001b\\`);
    }
}
async function ask(prompt) {
    const { createInterface } = await Promise.resolve().then(() => __importStar(require('readline')));
    const { PassThrough } = await Promise.resolve().then(() => __importStar(require('stream')));
    const stdinCopy = process.stdin.pipe(new PassThrough());
    try {
        const readlineInterface = createInterface({
            input: stdinCopy,
            output: process.stdout,
            prompt,
        });
        readlineInterface.prompt();
        for await (const line of readlineInterface) {
            return line;
        }
        return '';
    }
    finally {
        process.stdin.unpipe(stdinCopy);
    }
}
//# sourceMappingURL=run.js.map