"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildInfo = void 0;
const os_1 = __importDefault(require("os"));
const service_provider_server_1 = require("@mongosh/service-provider-server");
const crypt_library_paths_1 = require("./crypt-library-paths");
function getSystemArch() {
    return process.platform === 'darwin'
        ? os_1.default.cpus().some((cpu) => {
            return /Apple/.test(cpu.model);
        })
            ? 'arm64'
            : 'x64'
        : process.arch;
}
async function buildInfo({ withSegmentApiKey, withCryptSharedVersionInfo, } = {}) {
    var _a;
    const dependencyVersionInfo = {
        ...service_provider_server_1.CliServiceProvider.getVersionInformation()
    };
    try {
        if (withCryptSharedVersionInfo) {
            const version = (_a = (await (0, crypt_library_paths_1.getCryptLibraryPaths)()).expectedVersion) === null || _a === void 0 ? void 0 : _a.versionStr;
            if (version) {
                dependencyVersionInfo.cryptSharedLibraryVersion = version;
            }
        }
    }
    catch (_b) {
    }
    const runtimeData = {
        nodeVersion: process.version,
        opensslVersion: process.versions.openssl,
        sharedOpenssl: !!process.config.variables.node_shared_openssl,
        runtimeArch: getSystemArch(),
        runtimePlatform: process.platform,
        deps: { ...dependencyVersionInfo }
    };
    try {
        const buildInfo = { ...require('./build-info.json'), ...runtimeData };
        if (!withSegmentApiKey) {
            delete buildInfo.segmentApiKey;
        }
        return buildInfo;
    }
    catch (_c) {
        const { version } = require('../package.json');
        return {
            version,
            distributionKind: 'unpackaged',
            buildArch: process.arch,
            buildPlatform: process.platform,
            buildTarget: 'unknown',
            buildTime: null,
            gitVersion: null,
            ...runtimeData
        };
    }
}
exports.buildInfo = buildInfo;
//# sourceMappingURL=build-info.js.map