"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyCliArguments = exports.parseCliArgs = exports.getLocale = void 0;
const errors_1 = require("@mongosh/errors");
const i18n_1 = __importDefault(require("@mongosh/i18n"));
const yargs_parser_1 = __importDefault(require("yargs-parser"));
const clr_1 = require("./clr");
const constants_1 = require("./constants");
const UNKNOWN = 'cli-repl.arg-parser.unknown-option';
const OPTIONS = {
    string: [
        'apiVersion',
        'authenticationDatabase',
        'authenticationMechanism',
        'awsAccessKeyId',
        'awsIamSessionToken',
        'awsSecretAccessKey',
        'awsSessionToken',
        'awsIamSessionToken',
        'browser',
        'csfleLibraryPath',
        'cryptSharedLibPath',
        'db',
        'gssapiHostName',
        'gssapiServiceName',
        'sspiHostnameCanonicalization',
        'sspiRealmOverride',
        'host',
        'keyVaultNamespace',
        'kmsURL',
        'locale',
        'oidcFlows',
        'oidcRedirectUri',
        'password',
        'port',
        'sslPEMKeyFile',
        'sslPEMKeyPassword',
        'sslCAFile',
        'sslCertificateSelector',
        'sslCRLFile',
        'sslDisabledProtocols',
        'tlsCAFile',
        'tlsCertificateKeyFile',
        'tlsCertificateKeyFilePassword',
        'tlsCertificateSelector',
        'tlsCRLFile',
        'tlsDisabledProtocols',
        'username'
    ],
    boolean: [
        'apiDeprecationErrors',
        'apiStrict',
        'buildInfo',
        'help',
        'ipv6',
        'nodb',
        'norc',
        'oidcTrustedEndpoint',
        'quiet',
        'retryWrites',
        'shell',
        'smokeTests',
        'ssl',
        'sslAllowInvalidCertificates',
        'sslAllowInvalidHostnames',
        'sslFIPSMode',
        'tls',
        'tlsAllowInvalidCertificates',
        'tlsAllowInvalidHostnames',
        'tlsFIPSMode',
        'tlsUseSystemCA',
        'verbose',
        'version'
    ],
    array: [
        'eval',
        'file'
    ],
    alias: {
        h: 'help',
        p: 'password',
        u: 'username',
        f: 'file',
        'build-info': 'buildInfo',
        json: 'json',
        browser: 'browser',
        oidcRedirectUrl: 'oidcRedirectUri'
    },
    configuration: {
        'camel-case-expansion': false,
        'unknown-options-as-args': true,
        'parse-positional-numbers': false,
        'parse-numbers': false,
        'greedy-arrays': false,
        'short-option-groups': false
    }
};
const DEPRECATED_ARGS_WITH_REPLACEMENT = {
    ssl: 'tls',
    sslAllowInvalidCertificates: 'tlsAllowInvalidCertificates',
    sslAllowInvalidHostnames: 'tlsAllowInvalidHostnames',
    sslFIPSMode: 'tlsFIPSMode',
    sslPEMKeyFile: 'tlsCertificateKeyFile',
    sslPEMKeyPassword: 'tlsCertificateKeyFilePassword',
    sslCAFile: 'tlsCAFile',
    sslCertificateSelector: 'tlsCertificateSelector',
    sslCRLFile: 'tlsCRLFile',
    sslDisabledProtocols: 'tlsDisabledProtocols'
};
const UNSUPPORTED_ARGS = [
    'sslFIPSMode',
    'gssapiHostName'
];
function getLocale(args, env) {
    const localeIndex = args.indexOf('--locale');
    if (localeIndex > -1) {
        return args[localeIndex + 1];
    }
    const lang = env.LANG || env.LANGUAGE || env.LC_ALL || env.LC_MESSAGES;
    return lang ? lang.split('.')[0] : lang;
}
exports.getLocale = getLocale;
function isConnectionSpecifier(arg) {
    return typeof arg === 'string' &&
        (arg.startsWith('mongodb://') ||
            arg.startsWith('mongodb+srv://') ||
            !(arg.endsWith('.js') || arg.endsWith('.mongodb')));
}
function parseCliArgs(args) {
    var _a, _b;
    const programArgs = args.slice(2);
    i18n_1.default.setLocale(getLocale(programArgs, process.env));
    const parsed = (0, yargs_parser_1.default)(programArgs, OPTIONS);
    const positionalArguments = (_a = parsed._) !== null && _a !== void 0 ? _a : [];
    for (const arg of positionalArguments) {
        if (arg.startsWith('-')) {
            throw new Error(`  ${(0, clr_1.colorizeForStderr)(i18n_1.default.__(UNKNOWN), 'mongosh:error')} ${(0, clr_1.colorizeForStderr)(String(arg), 'bold')}
        ${constants_1.USAGE}`);
        }
    }
    if (!parsed.nodb && isConnectionSpecifier(positionalArguments[0])) {
        parsed.connectionSpecifier = positionalArguments.shift();
    }
    parsed.fileNames = [...((_b = parsed.file) !== null && _b !== void 0 ? _b : []), ...positionalArguments];
    delete parsed._;
    parsed._argParseWarnings = verifyCliArguments(parsed);
    return parsed;
}
exports.parseCliArgs = parseCliArgs;
function verifyCliArguments(args) {
    for (const unsupported of UNSUPPORTED_ARGS) {
        if (unsupported in args) {
            throw new errors_1.MongoshUnimplementedError(`Argument --${unsupported} is not supported in mongosh`, errors_1.CommonErrors.InvalidArgument);
        }
    }
    if (![undefined, true, false, 'relaxed', 'canonical'].includes(args.json)) {
        throw new errors_1.MongoshUnimplementedError('--json can only have the values relaxed or canonical', errors_1.CommonErrors.InvalidArgument);
    }
    const messages = [];
    for (const deprecated in DEPRECATED_ARGS_WITH_REPLACEMENT) {
        if (deprecated in args) {
            const replacement = DEPRECATED_ARGS_WITH_REPLACEMENT[deprecated];
            messages.push(`WARNING: argument --${deprecated} is deprecated and will be removed. Use --${replacement} instead.`);
            args[replacement] = args[deprecated];
            delete args[deprecated];
        }
    }
    return messages;
}
exports.verifyCliArguments = verifyCliArguments;
//# sourceMappingURL=arg-parser.js.map