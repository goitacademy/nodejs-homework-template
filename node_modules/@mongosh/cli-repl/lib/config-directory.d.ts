/// <reference types="node" />
import { EventEmitter } from 'events';
export declare type ShellHomePaths = {
    shellRoamingDataPath: string;
    shellLocalDataPath: string;
    shellRcPath: string;
};
export declare class ShellHomeDirectory {
    paths: ShellHomePaths;
    ensureExistsPromise: Promise<void> | null;
    constructor(paths: ShellHomePaths);
    ensureExists(): Promise<void>;
    roamingPath(subpath: string): string;
    localPath(subpath: string): string;
    rcPath(subpath: string): string;
}
export declare class ConfigManager<Config> extends EventEmitter {
    shellHomeDirectory: ShellHomeDirectory;
    config: Config | null;
    constructor(shellHomeDirectory: ShellHomeDirectory);
    path(): string;
    generateOrReadConfig(defaultConfig: Config): Promise<Config>;
    writeConfigFile(config: Config): Promise<void>;
}
export declare function getStoragePaths(): ShellHomePaths;
export declare function getGlobalConfigPaths(): string[];
