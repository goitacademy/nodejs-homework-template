"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const errors_1 = require("@mongosh/errors");
let PlanCache = class PlanCache extends decorators_1.ShellApiWithMongoClass {
    constructor(collection) {
        super();
        this._collection = collection;
    }
    get _mongo() {
        return this._collection._mongo;
    }
    [enums_1.asPrintable]() {
        return `PlanCache for collection ${this._collection._name}.`;
    }
    async clear() {
        return await this._collection.runCommand('planCacheClear');
    }
    async clearPlansByQuery(query, projection, sort) {
        const cmd = { query };
        if (projection) {
            cmd.projection = projection;
        }
        if (sort) {
            cmd.sort = sort;
        }
        return await this._collection.runCommand('planCacheClear', cmd);
    }
    async list(pipeline) {
        const p = pipeline || [];
        const agg = await this._collection.aggregate([{ $planCacheStats: {} }, ...p]);
        return await agg.toArray();
    }
    listQueryShapes() {
        throw new errors_1.MongoshDeprecatedError('PlanCache.listQueryShapes was deprecated, please use PlanCache.list instead');
    }
    getPlansByQuery() {
        throw new errors_1.MongoshDeprecatedError('PlanCache.getPlansByQuery was deprecated, please use PlanCache.list instead');
    }
};
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([])
], PlanCache.prototype, "clear", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([])
], PlanCache.prototype, "clearPlansByQuery", null);
__decorate([
    (0, decorators_1.serverVersions)(['4.4.0', enums_1.ServerVersions.latest]),
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([])
], PlanCache.prototype, "list", null);
__decorate([
    decorators_1.deprecated
], PlanCache.prototype, "listQueryShapes", null);
__decorate([
    decorators_1.deprecated
], PlanCache.prototype, "getPlansByQuery", null);
PlanCache = __decorate([
    decorators_1.shellApiClassDefault
], PlanCache);
exports.default = PlanCache;
//# sourceMappingURL=plan-cache.js.map