"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBQuery = void 0;
const decorators_1 = require("./decorators");
let DBQuery = class DBQuery extends decorators_1.ShellApiClass {
    constructor(instanceState) {
        super();
        this._instanceState = instanceState;
    }
    get shellBatchSize() {
        return this._instanceState.displayBatchSizeFromDBQuery;
    }
    set shellBatchSize(value) {
        void this._instanceState.printDeprecationWarning('DBQuery.shellBatchSize is deprecated, please use config.set("displayBatchSize") instead');
        this._instanceState.displayBatchSizeFromDBQuery = value;
    }
};
DBQuery = __decorate([
    decorators_1.shellApiClassDefault,
    decorators_1.classDeprecated
], DBQuery);
exports.DBQuery = DBQuery;
//# sourceMappingURL=dbquery.js.map