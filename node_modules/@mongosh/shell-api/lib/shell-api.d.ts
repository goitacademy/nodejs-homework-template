import { ShellApiClass } from './decorators';
import { asPrintable } from './enums';
import Mongo from './mongo';
import Database from './database';
import { CommandResult } from './result';
import type ShellInstanceState from './shell-instance-state';
import { ServerApi, ServerApiVersion } from '@mongosh/service-provider-core';
import { DBQuery } from './dbquery';
import { ClientSideFieldLevelEncryptionOptions } from './field-level-encryption';
import { ShellUserConfig } from '@mongosh/types';
declare const instanceStateSymbol: unique symbol;
declare const loadCallNestingLevelSymbol: unique symbol;
declare class ShellConfig extends ShellApiClass {
    _instanceState: ShellInstanceState;
    defaults: Readonly<ShellUserConfig>;
    constructor(instanceState: ShellInstanceState);
    set<K extends keyof ShellUserConfig>(key: K, value: ShellUserConfig[K]): Promise<string>;
    get<K extends keyof ShellUserConfig>(key: K): Promise<ShellUserConfig[K]>;
    reset<K extends keyof ShellUserConfig>(key: K): Promise<string>;
    _allKeys(): Promise<(keyof ShellUserConfig)[]>;
    [asPrintable](): Promise<Map<keyof ShellUserConfig, ShellUserConfig[keyof ShellUserConfig]>>;
}
export default class ShellApi extends ShellApiClass {
    [instanceStateSymbol]: ShellInstanceState;
    [loadCallNestingLevelSymbol]: number;
    DBQuery: DBQuery;
    config: ShellConfig;
    constructor(instanceState: ShellInstanceState);
    get _instanceState(): ShellInstanceState;
    get loadCallNestingLevel(): number;
    set loadCallNestingLevel(value: number);
    use(db: string): any;
    show(cmd: string, arg?: string): Promise<CommandResult>;
    exit(exitCode?: number): Promise<never>;
    quit(exitCode?: number): Promise<never>;
    Mongo(uri?: string, fleOptions?: ClientSideFieldLevelEncryptionOptions, otherOptions?: {
        api?: ServerApi | ServerApiVersion;
    }): Promise<Mongo>;
    connect(uri: string, user?: string, pwd?: string): Promise<Database>;
    it(): Promise<any>;
    version(): string;
    load(filename: string): Promise<true>;
    enableTelemetry(): Promise<any>;
    disableTelemetry(): Promise<any>;
    passwordPrompt(): Promise<string>;
    sleep(ms: number): Promise<void>;
    private _print;
    print(...origArgs: any[]): Promise<void>;
    printjson(...origArgs: any[]): Promise<void>;
    convertShardKeyToHashed(value: any): Promise<unknown>;
    cls(): Promise<void>;
    isInteractive(): boolean;
}
export {};
