"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const database_1 = __importDefault(require("./database"));
const errors_1 = require("@mongosh/errors");
const helpers_1 = require("./helpers");
let Session = class Session extends decorators_1.ShellApiWithMongoClass {
    constructor(mongo, options, session) {
        super();
        this._session = session;
        this._options = options;
        this._mongo = mongo;
        this._databases = {};
        this.id = session.id;
    }
    [enums_1.asPrintable]() {
        return this._session.id;
    }
    getDatabase(name) {
        (0, helpers_1.assertArgsDefinedType)([name], ['string'], 'Session.getDatabase');
        if (!(0, helpers_1.isValidDatabaseName)(name)) {
            throw new errors_1.MongoshInvalidInputError(`Invalid database name: ${name}`, errors_1.CommonErrors.InvalidArgument);
        }
        if (!(name in this._databases)) {
            this._databases[name] = new database_1.default(this._mongo, name, this);
        }
        return this._databases[name];
    }
    advanceOperationTime(ts) {
        this._session.advanceOperationTime(ts);
    }
    advanceClusterTime(clusterTime) {
        this._session.advanceClusterTime(clusterTime);
    }
    async endSession() {
        return await this._session.endSession();
    }
    hasEnded() {
        return this._session.hasEnded;
    }
    getClusterTime() {
        return this._session.clusterTime;
    }
    getOperationTime() {
        return this._session.operationTime;
    }
    getOptions() {
        return this._options;
    }
    startTransaction(options = {}) {
        return this._session.startTransaction(options);
    }
    async commitTransaction() {
        return await this._session.commitTransaction();
    }
    async abortTransaction() {
        return await this._session.abortTransaction();
    }
    async withTransaction(fn, options = {}) {
        (0, helpers_1.assertArgsDefinedType)([fn, options], ['function', [undefined, 'object']]);
        return await this._session.withTransaction(async () => await fn(), options);
    }
};
__decorate([
    decorators_1.returnsPromise
], Session.prototype, "endSession", null);
__decorate([
    decorators_1.returnsPromise
], Session.prototype, "commitTransaction", null);
__decorate([
    decorators_1.returnsPromise
], Session.prototype, "abortTransaction", null);
__decorate([
    decorators_1.returnsPromise
], Session.prototype, "withTransaction", null);
Session = __decorate([
    decorators_1.shellApiClassDefault,
    (0, decorators_1.classPlatforms)(['CLI'])
], Session);
exports.default = Session;
//# sourceMappingURL=session.js.map