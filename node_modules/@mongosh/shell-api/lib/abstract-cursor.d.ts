import { ShellApiWithMongoClass } from './decorators';
import type Mongo from './mongo';
import type { Document, FindCursor as ServiceProviderCursor, AggregationCursor as ServiceProviderAggregationCursor, RunCommandCursor as ServiceProviderRunCommandCursor } from '@mongosh/service-provider-core';
import { asPrintable } from './enums';
import { CursorIterationResult } from './result';
export declare abstract class AbstractCursor<CursorType extends ServiceProviderAggregationCursor | ServiceProviderCursor | ServiceProviderRunCommandCursor> extends ShellApiWithMongoClass {
    _mongo: Mongo;
    _cursor: CursorType;
    _transform: ((doc: any) => any) | null;
    _currentIterationResult: CursorIterationResult | null;
    constructor(mongo: Mongo, cursor: CursorType);
    [asPrintable](): Promise<CursorIterationResult>;
    _it(): Promise<CursorIterationResult>;
    batchSize(size: number): this;
    close(): Promise<void>;
    forEach(f: (doc: Document) => void | boolean | Promise<void> | Promise<boolean>): Promise<void>;
    hasNext(): Promise<boolean>;
    tryNext(): Promise<Document | null>;
    [Symbol.asyncIterator](): AsyncGenerator<Document, void, unknown>;
    isClosed(): boolean;
    isExhausted(): boolean;
    itcount(): Promise<number>;
    toArray(): Promise<Document[]>;
    pretty(): this;
    map(f: (doc: Document) => Document): this;
    maxTimeMS(value: number): this;
    next(): Promise<Document | null>;
    objsLeftInBatch(): number;
}
