import { ShellApiWithMongoClass } from './decorators';
import { Document, ClientSessionOptions, ClientSession, TransactionOptions, ClusterTime, TimestampType, ServerSessionId } from '@mongosh/service-provider-core';
import { asPrintable } from './enums';
import Mongo from './mongo';
import Database from './database';
export default class Session extends ShellApiWithMongoClass {
    id: ServerSessionId | undefined;
    _session: ClientSession;
    _options: ClientSessionOptions;
    _mongo: Mongo;
    private _databases;
    constructor(mongo: Mongo, options: ClientSessionOptions, session: ClientSession);
    [asPrintable](): ServerSessionId | undefined;
    getDatabase(name: string): Database;
    advanceOperationTime(ts: TimestampType): void;
    advanceClusterTime(clusterTime: ClusterTime): void;
    endSession(): Promise<void>;
    hasEnded(): boolean | undefined;
    getClusterTime(): ClusterTime | undefined;
    getOperationTime(): TimestampType | undefined;
    getOptions(): ClientSessionOptions;
    startTransaction(options?: TransactionOptions): void;
    commitTransaction(): Promise<Document>;
    abortTransaction(): Promise<Document>;
    withTransaction<T extends (...args: any) => any>(fn: T, options?: TransactionOptions): Promise<Document | undefined>;
}
