import type { ReplPlatform } from '@mongosh/service-provider-core';
import { Mongo, ShellInstanceState } from '.';
import { asPrintable, shellApiType, Topologies } from './enums';
export interface Namespace {
    db: string;
    collection: string;
}
export interface ShellResultSourceInformation {
    namespace: Namespace;
}
export interface ShellResult {
    rawValue: any;
    printable: any;
    type: string | null;
    source?: ShellResultSourceInformation;
}
export declare abstract class ShellApiClass {
    help: any;
    abstract get _instanceState(): ShellInstanceState;
    get [shellApiType](): string;
    set [shellApiType](value: string);
    [asPrintable](): any;
}
export declare abstract class ShellApiWithMongoClass extends ShellApiClass {
    abstract get _mongo(): Mongo;
    get _instanceState(): ShellInstanceState;
}
export declare abstract class ShellApiValueClass extends ShellApiClass {
    get _mongo(): never;
    get _instanceState(): never;
}
export declare function getShellApiType(rawValue: any): string | null;
export declare function toShellResult(rawValue: any): Promise<ShellResult>;
export interface ShellCommandAutocompleteParameters {
    getCollectionCompletionsForCurrentDb: (collName: string) => string[] | Promise<string[]>;
    getDatabaseCompletions: (dbName: string) => string[] | Promise<string[]>;
}
export declare type ShellCommandCompleter = (params: ShellCommandAutocompleteParameters, args: string[]) => Promise<string[] | undefined>;
export interface TypeSignature {
    type: string;
    serverVersions?: [string, string];
    apiVersions?: [number, number];
    topologies?: Topologies[];
    returnsPromise?: boolean;
    deprecated?: boolean;
    returnType?: string | TypeSignature;
    attributes?: {
        [key: string]: TypeSignature;
    };
    isDirectShellCommand?: boolean;
    acceptsRawInput?: boolean;
    shellCommandCompleter?: ShellCommandCompleter;
}
interface Signatures {
    [key: string]: TypeSignature;
}
declare const signatures: Signatures;
export { signatures };
export declare const toIgnore: string[];
export declare function shellApiClassDefault(constructor: Function): void;
export declare function shellApiClassNoHelp(constructor: Function): void;
export declare function serverVersions(versionArray: [string, string]): Function;
export declare function apiVersions(versionArray: [] | [number] | [number, number]): Function;
export declare function deprecated(_target: any, _propertyKey: string, descriptor: PropertyDescriptor): void;
export declare function topologies(topologiesArray: Topologies[]): Function;
export declare const nonAsyncFunctionsReturningPromises: string[];
export declare function returnsPromise(_target: any, _propertyKey: string, descriptor: PropertyDescriptor): void;
export declare function directShellCommand(_target: any, _propertyKey: string, descriptor: PropertyDescriptor): void;
export declare function shellCommandCompleter(completer: ShellCommandCompleter): Function;
export declare function returnType(type: string): Function;
export declare function classDeprecated(constructor: Function): void;
export declare function platforms(platformsArray: ReplPlatform[]): Function;
export declare function classPlatforms(platformsArray: ReplPlatform[]): Function;
export declare function addSourceToResults(constructor: Function): void;
