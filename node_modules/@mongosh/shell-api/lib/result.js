"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CursorIterationResult = exports.DeleteResult = exports.UpdateResult = exports.InsertOneResult = exports.InsertManyResult = exports.BulkWriteResult = exports.CommandResult = void 0;
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
let CommandResult = class CommandResult extends decorators_1.ShellApiValueClass {
    constructor(type, value) {
        super();
        this.type = type;
        this.value = value;
        this[enums_1.shellApiType] = type;
    }
    [enums_1.asPrintable]() {
        return this.value;
    }
    toJSON() {
        return this.value;
    }
};
CommandResult = __decorate([
    decorators_1.shellApiClassDefault
], CommandResult);
exports.CommandResult = CommandResult;
let BulkWriteResult = class BulkWriteResult extends decorators_1.ShellApiValueClass {
    constructor(acknowledged, insertedCount, insertedIds, matchedCount, modifiedCount, deletedCount, upsertedCount, upsertedIds) {
        super();
        this.acknowledged = acknowledged;
        this.insertedCount = insertedCount;
        this.insertedIds = insertedIds;
        this.matchedCount = matchedCount;
        this.modifiedCount = modifiedCount;
        this.deletedCount = deletedCount;
        this.upsertedCount = upsertedCount;
        this.upsertedIds = upsertedIds;
    }
};
BulkWriteResult = __decorate([
    decorators_1.shellApiClassDefault
], BulkWriteResult);
exports.BulkWriteResult = BulkWriteResult;
let InsertManyResult = class InsertManyResult extends decorators_1.ShellApiValueClass {
    constructor(acknowledged, insertedIds) {
        super();
        this.acknowledged = acknowledged;
        this.insertedIds = insertedIds;
    }
};
InsertManyResult = __decorate([
    decorators_1.shellApiClassDefault
], InsertManyResult);
exports.InsertManyResult = InsertManyResult;
let InsertOneResult = class InsertOneResult extends decorators_1.ShellApiValueClass {
    constructor(acknowledged, insertedId) {
        super();
        this.acknowledged = acknowledged;
        this.insertedId = insertedId;
    }
};
InsertOneResult = __decorate([
    decorators_1.shellApiClassDefault
], InsertOneResult);
exports.InsertOneResult = InsertOneResult;
let UpdateResult = class UpdateResult extends decorators_1.ShellApiValueClass {
    constructor(acknowledged, matchedCount, modifiedCount, upsertedCount, insertedId) {
        super();
        this.acknowledged = acknowledged;
        this.insertedId = insertedId;
        this.matchedCount = matchedCount;
        this.modifiedCount = modifiedCount;
        this.upsertedCount = upsertedCount;
    }
};
UpdateResult = __decorate([
    decorators_1.shellApiClassDefault
], UpdateResult);
exports.UpdateResult = UpdateResult;
let DeleteResult = class DeleteResult extends decorators_1.ShellApiValueClass {
    constructor(acknowledged, deletedCount) {
        super();
        this.acknowledged = acknowledged;
        this.deletedCount = deletedCount;
    }
};
DeleteResult = __decorate([
    decorators_1.shellApiClassDefault
], DeleteResult);
exports.DeleteResult = DeleteResult;
let CursorIterationResult = class CursorIterationResult extends decorators_1.ShellApiValueClass {
    constructor() {
        super();
        this.cursorHasMore = true;
        this.documents = [];
    }
};
CursorIterationResult = __decorate([
    decorators_1.shellApiClassDefault
], CursorIterationResult);
exports.CursorIterationResult = CursorIterationResult;
//# sourceMappingURL=result.js.map