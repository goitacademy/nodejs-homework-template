"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCursor = void 0;
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const result_1 = require("./result");
const helpers_1 = require("./helpers");
let AbstractCursor = class AbstractCursor extends decorators_1.ShellApiWithMongoClass {
    constructor(mongo, cursor) {
        super();
        this._currentIterationResult = null;
        this._mongo = mongo;
        this._cursor = cursor;
        this._transform = null;
    }
    async [enums_1.asPrintable]() {
        var _a;
        return (await (0, decorators_1.toShellResult)((_a = this._currentIterationResult) !== null && _a !== void 0 ? _a : await this._it())).printable;
    }
    async _it() {
        const results = this._currentIterationResult = new result_1.CursorIterationResult();
        await (0, helpers_1.iterate)(results, this, await this._mongo._displayBatchSize());
        results.cursorHasMore = !this.isExhausted();
        return results;
    }
    batchSize(size) {
        this._cursor.batchSize(size);
        return this;
    }
    async close() {
        await this._cursor.close();
    }
    async forEach(f) {
        for await (const doc of this) {
            if ((await f(doc)) === false) {
                break;
            }
        }
    }
    async hasNext() {
        return this._cursor.hasNext();
    }
    async tryNext() {
        let result = await this._cursor.tryNext();
        if (result !== null && this._transform !== null) {
            result = await this._transform(result);
        }
        return result;
    }
    async *[Symbol.asyncIterator]() {
        let doc;
        while ((doc = await this.tryNext()) != null) {
            yield doc;
        }
    }
    isClosed() {
        return this._cursor.closed;
    }
    isExhausted() {
        return this.isClosed() && this.objsLeftInBatch() === 0;
    }
    async itcount() {
        let count = 0;
        while (await this.tryNext()) {
            count++;
        }
        return count;
    }
    async toArray() {
        const result = [];
        for await (const doc of this) {
            result.push(doc);
        }
        return result;
    }
    pretty() {
        return this;
    }
    map(f) {
        if (this._transform === null) {
            this._transform = f;
        }
        else {
            const g = this._transform;
            this._transform = (doc) => f(g(doc));
        }
        return this;
    }
    maxTimeMS(value) {
        this._cursor.maxTimeMS(value);
        return this;
    }
    async next() {
        let result = await this._cursor.next();
        if (result !== null && this._transform !== null) {
            result = await this._transform(result);
        }
        return result;
    }
    objsLeftInBatch() {
        return this._cursor.bufferedCount();
    }
};
__decorate([
    (0, decorators_1.returnType)('this')
], AbstractCursor.prototype, "batchSize", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "close", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "forEach", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "hasNext", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "tryNext", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "itcount", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "toArray", null);
__decorate([
    (0, decorators_1.returnType)('this')
], AbstractCursor.prototype, "pretty", null);
__decorate([
    (0, decorators_1.returnType)('this')
], AbstractCursor.prototype, "map", null);
__decorate([
    (0, decorators_1.returnType)('this')
], AbstractCursor.prototype, "maxTimeMS", null);
__decorate([
    decorators_1.returnsPromise
], AbstractCursor.prototype, "next", null);
AbstractCursor = __decorate([
    decorators_1.shellApiClassNoHelp
], AbstractCursor);
exports.AbstractCursor = AbstractCursor;
//# sourceMappingURL=abstract-cursor.js.map