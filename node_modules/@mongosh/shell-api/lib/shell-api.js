"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const mongo_1 = __importDefault(require("./mongo"));
const result_1 = require("./result");
const helpers_1 = require("./helpers");
const service_provider_core_1 = require("@mongosh/service-provider-core");
const errors_1 = require("@mongosh/errors");
const dbquery_1 = require("./dbquery");
const util_1 = require("util");
const path_1 = require("path");
const types_1 = require("@mongosh/types");
const i18n_1 = __importDefault(require("@mongosh/i18n"));
const instanceStateSymbol = Symbol.for('@@mongosh.instanceState');
const loadCallNestingLevelSymbol = Symbol.for('@@mongosh.loadCallNestingLevel');
let ShellConfig = class ShellConfig extends decorators_1.ShellApiClass {
    constructor(instanceState) {
        super();
        this._instanceState = instanceState;
        this.defaults = Object.freeze(new types_1.ShellUserConfig());
    }
    async set(key, value) {
        var _a, _b;
        (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.set');
        const { evaluationListener } = this._instanceState;
        const isValidKey = (await this._allKeys()).includes(key);
        if (isValidKey) {
            const validationResult = await ((_a = evaluationListener.validateConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key, value));
            if (validationResult) {
                return `Cannot set option "${key}": ${validationResult}`;
            }
        }
        const result = isValidKey && await ((_b = evaluationListener.setConfig) === null || _b === void 0 ? void 0 : _b.call(evaluationListener, key, value));
        if (result !== 'success') {
            return `Option "${key}" is not available in this environment`;
        }
        return `Setting "${key}" has been changed`;
    }
    async get(key) {
        var _a, _b;
        (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.get');
        const { evaluationListener } = this._instanceState;
        return (_b = await ((_a = evaluationListener.getConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key))) !== null && _b !== void 0 ? _b : this.defaults[key];
    }
    async reset(key) {
        var _a;
        (0, helpers_1.assertArgsDefinedType)([key], ['string'], 'config.reset');
        const { evaluationListener } = this._instanceState;
        const result = await ((_a = evaluationListener.resetConfig) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, key));
        if (result !== 'success') {
            return `Option "${key}" cannot be changed in this environment`;
        }
        return `Setting "${key}" has been reset to its default value`;
    }
    async _allKeys() {
        var _a, _b;
        const { evaluationListener } = this._instanceState;
        return ((_b = await ((_a = evaluationListener.listConfigOptions) === null || _a === void 0 ? void 0 : _a.call(evaluationListener))) !== null && _b !== void 0 ? _b : Object.keys(this.defaults));
    }
    async [enums_1.asPrintable]() {
        return new Map(await Promise.all((await this._allKeys()).map(async (key) => [key, await this.get(key)])));
    }
};
__decorate([
    decorators_1.returnsPromise
], ShellConfig.prototype, "set", null);
__decorate([
    decorators_1.returnsPromise
], ShellConfig.prototype, "get", null);
__decorate([
    decorators_1.returnsPromise
], ShellConfig.prototype, "reset", null);
ShellConfig = __decorate([
    decorators_1.shellApiClassDefault
], ShellConfig);
async function useCompleter(params, args) {
    var _a;
    if (args.length > 2)
        return undefined;
    return await params.getDatabaseCompletions((_a = args[1]) !== null && _a !== void 0 ? _a : '');
}
async function showCompleter(params, args) {
    if (args.length > 2)
        return undefined;
    if (args[1] === 'd') {
        return ['databases'];
    }
    const candidates = [
        'databases', 'dbs', 'collections', 'tables', 'profile', 'users', 'roles', 'log', 'logs',
        'startupWarnings', 'automationNotices', 'nonGenuineMongoDBCheck'
    ];
    return candidates.filter(str => { var _a; return str.startsWith((_a = args[1]) !== null && _a !== void 0 ? _a : ''); });
}
let ShellApi = class ShellApi extends decorators_1.ShellApiClass {
    constructor(instanceState) {
        super();
        this[instanceStateSymbol] = instanceState;
        this[loadCallNestingLevelSymbol] = 0;
        this.DBQuery = new dbquery_1.DBQuery(instanceState);
        this.config = new ShellConfig(instanceState);
    }
    get _instanceState() {
        return this[instanceStateSymbol];
    }
    get loadCallNestingLevel() {
        return this[loadCallNestingLevelSymbol];
    }
    set loadCallNestingLevel(value) {
        this[loadCallNestingLevelSymbol] = value;
    }
    use(db) {
        return this._instanceState.currentDb._mongo.use(db);
    }
    async show(cmd, arg) {
        return await this._instanceState.currentDb._mongo.show(cmd, arg);
    }
    async exit(exitCode) {
        var _a, _b;
        (0, helpers_1.assertArgsDefinedType)([exitCode], [[undefined, 'number']], 'exit');
        (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'the exit/quit commands');
        await this._instanceState.close(true);
        await ((_b = (_a = this._instanceState.evaluationListener).onExit) === null || _b === void 0 ? void 0 : _b.call(_a, exitCode));
        throw new errors_1.MongoshInternalError('.onExit listener returned');
    }
    async quit(exitCode) {
        return await this.exit(exitCode);
    }
    async Mongo(uri, fleOptions, otherOptions) {
        (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'new Mongo connections');
        const mongo = new mongo_1.default(this._instanceState, uri, fleOptions, otherOptions);
        await mongo.connect();
        this._instanceState.mongos.push(mongo);
        return mongo;
    }
    async connect(uri, user, pwd) {
        (0, helpers_1.assertArgsDefinedType)([uri, user, pwd], ['string', [undefined, 'string'], [undefined, 'string']], 'connect');
        (0, helpers_1.assertCLI)(this._instanceState.initialServiceProvider.platform, 'new Mongo connections');
        const mongo = new mongo_1.default(this._instanceState, uri);
        await mongo.connect(user, pwd);
        this._instanceState.mongos.push(mongo);
        const db = mongo._serviceProvider.initialDb || service_provider_core_1.DEFAULT_DB;
        return mongo.getDB(db);
    }
    async it() {
        if (!this._instanceState.currentCursor) {
            return new result_1.CursorIterationResult();
        }
        return await this._instanceState.currentCursor._it();
    }
    version() {
        const version = require('../package.json').version;
        return version;
    }
    async load(filename) {
        (0, helpers_1.assertArgsDefinedType)([filename], ['string'], 'load');
        if (!this._instanceState.evaluationListener.onLoad) {
            throw new errors_1.MongoshUnimplementedError('load is not currently implemented for this platform', errors_1.CommonErrors.NotImplemented);
        }
        this._instanceState.messageBus.emit('mongosh:api-load-file', {
            nested: this.loadCallNestingLevel > 0,
            filename
        });
        const { resolvedFilename, evaluate } = await this._instanceState.evaluationListener.onLoad(filename);
        const context = this._instanceState.context;
        const previousFilename = context.__filename;
        context.__filename = resolvedFilename;
        context.__dirname = (0, path_1.dirname)(resolvedFilename);
        this.loadCallNestingLevel++;
        try {
            await evaluate();
        }
        finally {
            this.loadCallNestingLevel--;
            if (previousFilename) {
                context.__filename = previousFilename;
                context.__dirname = (0, path_1.dirname)(previousFilename);
            }
            else {
                delete context.__filename;
                delete context.__dirname;
            }
        }
        return true;
    }
    async enableTelemetry() {
        var _a, _b;
        const result = await ((_b = (_a = this._instanceState.evaluationListener).setConfig) === null || _b === void 0 ? void 0 : _b.call(_a, 'enableTelemetry', true));
        if (result === 'success') {
            return i18n_1.default.__('cli-repl.cli-repl.enabledTelemetry');
        }
    }
    async disableTelemetry() {
        var _a, _b;
        const result = await ((_b = (_a = this._instanceState.evaluationListener).setConfig) === null || _b === void 0 ? void 0 : _b.call(_a, 'enableTelemetry', false));
        if (result === 'success') {
            return i18n_1.default.__('cli-repl.cli-repl.disabledTelemetry');
        }
    }
    async passwordPrompt() {
        const { evaluationListener } = this._instanceState;
        if (!evaluationListener.onPrompt) {
            throw new errors_1.MongoshUnimplementedError('passwordPrompt() is not available in this shell', errors_1.CommonErrors.NotImplemented);
        }
        return await evaluationListener.onPrompt('Enter password', 'password');
    }
    async sleep(ms) {
        return await (0, util_1.promisify)(setTimeout)(ms);
    }
    async _print(origArgs, type) {
        var _a;
        const { evaluationListener } = this._instanceState;
        const args = await Promise.all(origArgs.map((arg) => (0, decorators_1.toShellResult)(arg)));
        await ((_a = evaluationListener.onPrint) === null || _a === void 0 ? void 0 : _a.call(evaluationListener, args, type));
    }
    async print(...origArgs) {
        await this._print(origArgs, 'print');
    }
    async printjson(...origArgs) {
        await this._print(origArgs, 'printjson');
    }
    async convertShardKeyToHashed(value) {
        return this._instanceState.currentDb._mongo.convertShardKeyToHashed(value);
    }
    async cls() {
        var _a;
        const { evaluationListener } = this._instanceState;
        await ((_a = evaluationListener.onClearCommand) === null || _a === void 0 ? void 0 : _a.call(evaluationListener));
    }
    isInteractive() {
        return this._instanceState.isInteractive;
    }
};
__decorate([
    decorators_1.directShellCommand,
    (0, decorators_1.shellCommandCompleter)(useCompleter)
], ShellApi.prototype, "use", null);
__decorate([
    decorators_1.directShellCommand,
    decorators_1.returnsPromise,
    (0, decorators_1.shellCommandCompleter)(showCompleter)
], ShellApi.prototype, "show", null);
__decorate([
    decorators_1.directShellCommand,
    decorators_1.returnsPromise,
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "exit", null);
__decorate([
    decorators_1.directShellCommand,
    decorators_1.returnsPromise,
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "quit", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.returnType)('Mongo'),
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "Mongo", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.returnType)('Database'),
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "connect", null);
__decorate([
    decorators_1.directShellCommand,
    decorators_1.returnsPromise
], ShellApi.prototype, "it", null);
__decorate([
    decorators_1.returnsPromise
], ShellApi.prototype, "load", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "enableTelemetry", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "disableTelemetry", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.platforms)(['CLI'])
], ShellApi.prototype, "passwordPrompt", null);
__decorate([
    decorators_1.returnsPromise
], ShellApi.prototype, "sleep", null);
__decorate([
    decorators_1.returnsPromise
], ShellApi.prototype, "print", null);
__decorate([
    decorators_1.returnsPromise
], ShellApi.prototype, "printjson", null);
__decorate([
    decorators_1.returnsPromise
], ShellApi.prototype, "convertShardKeyToHashed", null);
__decorate([
    decorators_1.directShellCommand,
    decorators_1.returnsPromise
], ShellApi.prototype, "cls", null);
ShellApi = __decorate([
    decorators_1.shellApiClassDefault
], ShellApi);
exports.default = ShellApi;
//# sourceMappingURL=shell-api.js.map