"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const explainable_cursor_1 = __importDefault(require("./explainable-cursor"));
const decorators_1 = require("./decorators");
const enums_1 = require("./enums");
const helpers_1 = require("./helpers");
let Explainable = class Explainable extends decorators_1.ShellApiWithMongoClass {
    constructor(mongo, collection, verbosity) {
        super();
        this._mongo = mongo;
        this._collection = collection;
        this._verbosity = verbosity;
    }
    [enums_1.asPrintable]() {
        return `Explainable(${this._collection.getFullName()})`;
    }
    _emitExplainableApiCall(methodName, methodArguments = {}) {
        this._mongo._instanceState.emitApiCallWithArgs({
            method: methodName,
            class: 'Explainable',
            db: this._collection._database._name,
            coll: this._collection._name,
            arguments: methodArguments
        });
    }
    getCollection() {
        this._emitExplainableApiCall('getCollection');
        return this._collection;
    }
    getVerbosity() {
        this._emitExplainableApiCall('getVerbosity');
        return this._verbosity;
    }
    setVerbosity(verbosity) {
        verbosity = (0, helpers_1.validateExplainableVerbosity)(verbosity);
        this._emitExplainableApiCall('setVerbosity', { verbosity });
        this._verbosity = verbosity;
    }
    async find(query, projection) {
        this._emitExplainableApiCall('find', { query, projection });
        const cursor = await this._collection.find(query, projection);
        return new explainable_cursor_1.default(this._mongo, cursor, this._verbosity);
    }
    async aggregate(...args) {
        var _a;
        this._emitExplainableApiCall('aggregate', { args });
        let options;
        let pipeline;
        if (Array.isArray(args[0])) {
            pipeline = args[0];
            options = (_a = args[1]) !== null && _a !== void 0 ? _a : {};
        }
        else {
            pipeline = args;
            options = {};
        }
        return await this._collection.aggregate(pipeline, {
            ...options,
            explain: this._verbosity
        });
    }
    async count(query = {}, options = {}) {
        this._emitExplainableApiCall('count', { query, options });
        return (0, helpers_1.markAsExplainOutput)(await this._collection._database._runCommand({
            explain: {
                count: `${this._collection._name}`,
                query,
                ...options
            },
            verbosity: this._verbosity
        }));
    }
    async distinct(field, query, options = {}) {
        this._emitExplainableApiCall('distinct', { field, query, options });
        return this._collection.distinct(field, query !== null && query !== void 0 ? query : {}, { ...options, explain: this._verbosity });
    }
    async findAndModify(options) {
        this._emitExplainableApiCall('findAndModify', { options });
        return this._collection.findAndModify({ ...options, explain: this._verbosity });
    }
    async findOneAndDelete(filter, options = {}) {
        this._emitExplainableApiCall('findOneAndDelete', { filter, options });
        return this._collection.findOneAndDelete(filter, { ...options, explain: this._verbosity });
    }
    async findOneAndReplace(filter, replacement, options = {}) {
        this._emitExplainableApiCall('findOneAndReplace', { filter, options });
        return this._collection.findOneAndReplace(filter, replacement, { ...options, explain: this._verbosity });
    }
    async findOneAndUpdate(filter, update, options = {}) {
        this._emitExplainableApiCall('findOneAndUpdate', { filter, options });
        return this._collection.findOneAndUpdate(filter, update, { ...options, explain: this._verbosity });
    }
    async remove(query, options = {}) {
        this._emitExplainableApiCall('remove', { query, options });
        options = { ...(0, helpers_1.processRemoveOptions)(options), explain: this._verbosity };
        return this._collection.remove(query, options);
    }
    async update(filter, update, options = {}) {
        this._emitExplainableApiCall('update', { filter, update, options });
        return this._collection.update(filter, update, { ...options, explain: this._verbosity });
    }
    async mapReduce(map, reduce, optionsOrOutString) {
        this._emitExplainableApiCall('mapReduce', { map, reduce, optionsOrOutString });
        const options = { ...(0, helpers_1.processMapReduceOptions)(optionsOrOutString), explain: this._verbosity };
        return this._collection.mapReduce(map, reduce, options);
    }
};
__decorate([
    (0, decorators_1.returnType)('ExplainableCursor'),
    (0, decorators_1.apiVersions)([1]),
    decorators_1.returnsPromise
], Explainable.prototype, "find", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "aggregate", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "count", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "distinct", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "findAndModify", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "findOneAndDelete", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "findOneAndReplace", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "findOneAndUpdate", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "remove", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Explainable.prototype, "update", null);
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.serverVersions)(['4.4.0', enums_1.ServerVersions.latest]),
    (0, decorators_1.apiVersions)([])
], Explainable.prototype, "mapReduce", null);
Explainable = __decorate([
    decorators_1.shellApiClassDefault
], Explainable);
exports.default = Explainable;
//# sourceMappingURL=explainable.js.map