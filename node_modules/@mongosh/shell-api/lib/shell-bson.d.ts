/// <reference types="node" />
import Help from './help';
import { BinaryType, Document, bson as BSON } from '@mongosh/service-provider-core';
interface ShellBsonBase {
    DBRef: (namespace: string, oid: any, db?: string, fields?: Document) => typeof BSON.DBRef.prototype;
    bsonsize: (object: any) => number;
    MaxKey: () => typeof BSON.MaxKey.prototype;
    MinKey: () => typeof BSON.MinKey.prototype;
    ObjectId: (id?: string | number | typeof BSON.ObjectId.prototype | Buffer) => typeof BSON.ObjectId.prototype;
    Timestamp: (t?: number | typeof BSON.Long.prototype | {
        t: number;
        i: number;
    }, i?: number) => typeof BSON.Timestamp.prototype;
    Code: (c?: string | Function, s?: any) => typeof BSON.Code.prototype;
    NumberDecimal: (s?: string) => typeof BSON.Decimal128.prototype;
    NumberInt: (v?: string) => typeof BSON.Int32.prototype;
    NumberLong: (s?: string | number) => typeof BSON.Long.prototype;
    ISODate: (input?: string) => Date;
    BinData: (subtype: number, b64string: string) => BinaryType;
    HexData: (subtype: number, hexstr: string) => BinaryType;
    UUID: (hexstr?: string) => BinaryType;
    MD5: (hexstr: string) => BinaryType;
    Decimal128: typeof BSON.Decimal128;
    BSONSymbol: typeof BSON.BSONSymbol;
    Int32: typeof BSON.Int32;
    Long: typeof BSON.Long;
    Binary: typeof BSON.Binary;
    Double: typeof BSON.Double;
    EJSON: typeof BSON.EJSON;
    BSONRegExp: typeof BSON.BSONRegExp;
}
declare type WithHelp<T> = {
    [prop in keyof T]: T[prop] & {
        help?: () => Help;
    };
};
export declare type ShellBson = WithHelp<ShellBsonBase>;
export default function constructShellBson(bson: typeof BSON, printWarning: (msg: string) => void): ShellBson;
export {};
