"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkFindOp = void 0;
const decorators_1 = require("./decorators");
const errors_1 = require("@mongosh/errors");
const enums_1 = require("./enums");
const helpers_1 = require("./helpers");
const result_1 = require("./result");
let BulkFindOp = class BulkFindOp extends decorators_1.ShellApiWithMongoClass {
    constructor(innerFind, parentBulk) {
        super();
        this._serviceProviderBulkFindOp = innerFind;
        this._parentBulk = parentBulk;
    }
    get _mongo() {
        return this._parentBulk._mongo;
    }
    [enums_1.asPrintable]() {
        return 'BulkFindOp';
    }
    collation(spec) {
        this._serviceProviderBulkFindOp.collation(spec);
        return this;
    }
    arrayFilters(filters) {
        this._serviceProviderBulkFindOp.arrayFilters(filters);
        return this;
    }
    hint(hintDoc) {
        (0, helpers_1.assertArgsDefinedType)([hintDoc], [true], 'BulkFindOp.hint');
        this._serviceProviderBulkFindOp.hint(hintDoc);
        return this;
    }
    delete() {
        this._parentBulk._batchCounts.nRemoveOps++;
        this._serviceProviderBulkFindOp.delete();
        return this._parentBulk;
    }
    deleteOne() {
        this._parentBulk._batchCounts.nRemoveOps++;
        this._serviceProviderBulkFindOp.deleteOne();
        return this._parentBulk;
    }
    remove() {
        return this.delete();
    }
    removeOne() {
        return this.deleteOne();
    }
    replaceOne(replacement) {
        this._parentBulk._batchCounts.nUpdateOps++;
        (0, helpers_1.assertArgsDefinedType)([replacement], [true], 'BulkFindOp.replacement');
        const op = (0, helpers_1.shallowClone)(replacement);
        this._serviceProviderBulkFindOp.replaceOne(op);
        return this._parentBulk;
    }
    updateOne(update) {
        this._parentBulk._batchCounts.nUpdateOps++;
        (0, helpers_1.assertArgsDefinedType)([update], [true], 'BulkFindOp.update');
        const op = (0, helpers_1.shallowClone)(update);
        this._serviceProviderBulkFindOp.updateOne(op);
        return this._parentBulk;
    }
    update(update) {
        this._parentBulk._batchCounts.nUpdateOps++;
        (0, helpers_1.assertArgsDefinedType)([update], [true], 'BulkFindOp.update');
        const op = (0, helpers_1.shallowClone)(update);
        this._serviceProviderBulkFindOp.update(op);
        return this._parentBulk;
    }
    upsert() {
        this._serviceProviderBulkFindOp.upsert();
        return this;
    }
};
__decorate([
    (0, decorators_1.returnType)('BulkFindOp'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "collation", null);
__decorate([
    (0, decorators_1.returnType)('BulkFindOp'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "arrayFilters", null);
__decorate([
    (0, decorators_1.returnType)('BulkFindOp'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "hint", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "delete", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "deleteOne", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1]),
    decorators_1.deprecated
], BulkFindOp.prototype, "remove", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1]),
    decorators_1.deprecated
], BulkFindOp.prototype, "removeOne", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "replaceOne", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1])
], BulkFindOp.prototype, "updateOne", null);
__decorate([
    (0, decorators_1.returnType)('Bulk')
], BulkFindOp.prototype, "update", null);
__decorate([
    (0, decorators_1.returnType)('Bulk')
], BulkFindOp.prototype, "upsert", null);
BulkFindOp = __decorate([
    decorators_1.shellApiClassDefault
], BulkFindOp);
exports.BulkFindOp = BulkFindOp;
let Bulk = class Bulk extends decorators_1.ShellApiWithMongoClass {
    constructor(collection, innerBulk, ordered = false) {
        super();
        this._collection = collection;
        this._mongo = collection._mongo;
        this._serviceProviderBulkOp = innerBulk;
        this._batchCounts = {
            nInsertOps: 0,
            nUpdateOps: 0,
            nRemoveOps: 0
        };
        this._executed = false;
        this._ordered = ordered;
    }
    [enums_1.asPrintable]() {
        return this.toJSON();
    }
    _emitBulkApiCall(methodName, methodArguments = {}) {
        this._mongo._instanceState.emitApiCallWithArgs({
            method: methodName,
            class: 'Bulk',
            db: this._collection._database._name,
            coll: this._collection._name,
            arguments: methodArguments
        });
    }
    async execute(writeConcern) {
        const { result } = await this._serviceProviderBulkOp.execute();
        this._executed = true;
        this._emitBulkApiCall('execute', { writeConcern: writeConcern });
        return new result_1.BulkWriteResult(!!result.ok, result.nInserted, result.insertedIds, result.nMatched, result.nModified, result.nRemoved, result.nUpserted, result.upserted);
    }
    find(query) {
        (0, helpers_1.assertArgsDefinedType)([query], [true], 'Bulk.find');
        return new BulkFindOp(this._serviceProviderBulkOp.find(query), this);
    }
    insert(document) {
        this._batchCounts.nInsertOps++;
        (0, helpers_1.assertArgsDefinedType)([document], [true], 'Bulk.insert');
        this._serviceProviderBulkOp.insert(document);
        return this;
    }
    toJSON() {
        const batches = this._serviceProviderBulkOp.batches.length;
        return {
            ...this._batchCounts,
            nBatches: batches
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    getOperations() {
        if (!this._executed) {
            throw new errors_1.MongoshInvalidInputError('Cannot call getOperations on an unexecuted Bulk operation', errors_1.CommonErrors.InvalidOperation);
        }
        return this._serviceProviderBulkOp.batches.map((b) => ({
            originalZeroIndex: b.originalZeroIndex,
            batchType: b.batchType,
            operations: b.operations
        }));
    }
};
__decorate([
    decorators_1.returnsPromise,
    (0, decorators_1.apiVersions)([1])
], Bulk.prototype, "execute", null);
__decorate([
    (0, decorators_1.returnType)('BulkFindOp'),
    (0, decorators_1.apiVersions)([1])
], Bulk.prototype, "find", null);
__decorate([
    (0, decorators_1.returnType)('Bulk'),
    (0, decorators_1.apiVersions)([1])
], Bulk.prototype, "insert", null);
Bulk = __decorate([
    decorators_1.shellApiClassDefault
], Bulk);
exports.default = Bulk;
//# sourceMappingURL=bulk.js.map