import { CommonErrors } from './common-errors';
declare function getScopeFromErrorCode(code: string | null | undefined): string | undefined;
declare function isShouldReportAsBugError(err: Error & {
    code?: string;
}): boolean;
declare abstract class MongoshBaseError extends Error {
    readonly code: string | undefined;
    readonly scope: string | undefined;
    readonly metadata: Object | undefined;
    constructor(name: string, message: string, code?: string, metadata?: Object);
}
declare class MongoshRuntimeError extends MongoshBaseError {
    constructor(message: string, code?: string, metadata?: Object);
}
declare class MongoshInternalError extends MongoshBaseError {
    constructor(message: string, metadata?: Object);
}
declare class MongoshUnimplementedError extends MongoshBaseError {
    constructor(message: string, code?: string, metadata?: Object);
}
declare class MongoshInvalidInputError extends MongoshBaseError {
    constructor(message: string, code?: string, metadata?: Object);
}
declare class MongoshWarning extends MongoshBaseError {
    constructor(message: string, code?: string, metadata?: Object);
}
declare class MongoshDeprecatedError extends MongoshBaseError {
    constructor(message: string, metadata?: Object);
}
declare class MongoshCommandFailed extends MongoshBaseError {
    constructor(message: string, metadata?: Object);
}
export { getScopeFromErrorCode, isShouldReportAsBugError, MongoshBaseError, MongoshWarning, MongoshRuntimeError, MongoshInternalError, MongoshInvalidInputError, MongoshUnimplementedError, MongoshDeprecatedError, MongoshCommandFailed, CommonErrors };
