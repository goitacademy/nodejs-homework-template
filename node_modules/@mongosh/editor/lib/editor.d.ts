/// <reference types="node" />
import { Readable } from 'stream';
import { ShellInstanceState } from '@mongosh/shell-api';
import { ShellResult } from '@mongosh/shell-evaluator';
import type { MongoshBus } from '@mongosh/types';
export interface EditorOptions {
    input: Readable;
    vscodeDir: string;
    tmpDir: string;
    instanceState: ShellInstanceState;
    loadExternalCode: (input: string, filename: string) => Promise<ShellResult>;
}
export declare class Editor {
    _input: Readable;
    _vscodeDir: string;
    _tmpDir: string;
    _instanceState: ShellInstanceState;
    _loadExternalCode: (input: string, filename: string) => Promise<ShellResult>;
    _lastContent: string;
    _lastInputCode: string;
    print: (...args: any[]) => Promise<void>;
    constructor({ input, vscodeDir, tmpDir, instanceState, loadExternalCode }: EditorOptions);
    static create(options: EditorOptions): Editor;
    _getExtension(cmd: string): Promise<string>;
    _getEditor(): Promise<string | null>;
    _createTempFile({ content, ext }: {
        content: string;
        ext: string;
    }): Promise<string>;
    _readAndDeleteTempFile(tmpDoc: string): Promise<string>;
    _isVscodeApp(cmd: string): boolean;
    _isIdentifier(code: string): boolean;
    _isNumeric(code: string): boolean;
    _getEditorContent(code: string): Promise<string>;
    _prepareResult({ originalCode, modifiedCode }: {
        originalCode: string;
        modifiedCode: string;
    }): string;
    _setLastInputCode(code: string): void;
    _getLastInputCode(code: string): string;
    runEditCommand(code: string): Promise<void>;
    get messageBus(): MongoshBus;
}
