export declare type MongoshAnalyticsIdentity = {
    userId: string;
} | {
    anonymousId: string;
};
export interface MongoshAnalytics {
    identify(message: MongoshAnalyticsIdentity & {
        traits: {
            platform: string;
        };
    }): void;
    track(message: MongoshAnalyticsIdentity & {
        event: string;
        properties: {
            mongosh_version: string;
            [key: string]: any;
        };
    }): void;
}
export declare class NoopAnalytics implements MongoshAnalytics {
    identify(_info: any): void;
    track(_info: any): void;
}
export declare class ToggleableAnalytics implements MongoshAnalytics {
    _queue: Array<['identify', Parameters<MongoshAnalytics['identify']>] | ['track', Parameters<MongoshAnalytics['track']>]>;
    _state: 'enabled' | 'disabled' | 'paused';
    _target: MongoshAnalytics;
    _pendingError?: Error;
    constructor(target?: MongoshAnalytics);
    identify(...args: Parameters<MongoshAnalytics['identify']>): void;
    track(...args: Parameters<MongoshAnalytics['track']>): void;
    enable(): void;
    disable(): void;
    pause(): void;
    _validateArgs([firstArg]: [MongoshAnalyticsIdentity]): void;
}
