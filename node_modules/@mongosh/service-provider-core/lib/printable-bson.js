"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bsonStringifiers = void 0;
const index_1 = require("./index");
const util_1 = require("util");
const inspectCustom = Symbol.for('nodejs.util.inspect.custom');
exports.bsonStringifiers = {
    ObjectId: function () {
        return `ObjectId("${this.toHexString()}")`;
    },
    DBRef: function (depth, options) {
        return `DBRef("${this.collection}", ` +
            (0, util_1.inspect)(this.oid, options) +
            (this.db ? `, "${this.db}"` : '') +
            ')';
    },
    MaxKey: function () {
        return 'MaxKey()';
    },
    MinKey: function () {
        return 'MinKey()';
    },
    Timestamp: function () {
        return `Timestamp({ t: ${this.getHighBits()}, i: ${this.getLowBits()} })`;
    },
    BSONSymbol: function () {
        return `BSONSymbol("${this.valueOf()}")`;
    },
    Code: function () {
        const j = this.toJSON();
        return `Code("${j.code}"${j.scope ? `, ${JSON.stringify(j.scope)}` : ''})`;
    },
    Decimal128: function () {
        return `Decimal128("${this.toString()}")`;
    },
    Int32: function () {
        return `Int32(${this.valueOf()})`;
    },
    Long: function () {
        return `Long("${this.toString()}"${this.unsigned ? ', true' : ''})`;
    },
    BSONRegExp: function () {
        return `BSONRegExp(${JSON.stringify(this.pattern)}, ${JSON.stringify(this.options)})`;
    },
    Binary: function () {
        const hexString = this.toString('hex');
        switch (this.sub_type) {
            case index_1.bson.Binary.SUBTYPE_MD5:
                return `MD5("${hexString}")`;
            case index_1.bson.Binary.SUBTYPE_UUID:
                if (hexString.length === 32) {
                    const asUUID = hexString.match(/^(.{8})(.{4})(.{4})(.{4})(.{12})$/)
                        .slice(1, 6).join('-');
                    return `UUID("${asUUID}")`;
                }
            default:
                return `Binary(Buffer.from("${hexString}", "hex"), ${this.sub_type})`;
        }
    },
};
exports.bsonStringifiers.ObjectID = exports.bsonStringifiers.ObjectId;
function default_1(bson) {
    if (!bson) {
        bson = index_1.bson;
    }
    for (const [key, stringifier] of Object.entries(exports.bsonStringifiers)) {
        if (!(key in bson)) {
            continue;
        }
        const cls = bson[key];
        for (const key of [inspectCustom, 'inspect']) {
            try {
                cls.prototype[key] = stringifier;
            }
            catch (_a) {
            }
        }
    }
}
exports.default = default_1;
//# sourceMappingURL=printable-bson.js.map