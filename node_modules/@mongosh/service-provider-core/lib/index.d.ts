import './textencoder-polyfill';
import ServiceProvider, { ServiceProviderCore } from './service-provider';
import getConnectInfo, { ConnectInfo } from './connect-info';
import type { ReplPlatform } from './platform';
declare const DEFAULT_DB = "test";
import { ObjectId, DBRef, MaxKey, MinKey, Timestamp, BSONSymbol, Code, Decimal128, Int32, Long, Binary, calculateObjectSize, Double, BSONRegExp } from 'bson';
import { bsonStringifiers } from './printable-bson';
import ShellAuthOptions from './shell-auth-options';
export * from './all-transport-types';
export * from './all-fle-types';
export { MapReduceOptions, FinalizeFunction } from './map-reduce-options';
export { CreateEncryptedCollectionOptions, CheckMetadataConsistencyOptions } from './admin';
declare const bson: {
    ObjectId: typeof ObjectId;
    DBRef: typeof DBRef;
    MaxKey: typeof MaxKey;
    MinKey: typeof MinKey;
    Timestamp: typeof Timestamp;
    BSONSymbol: typeof BSONSymbol;
    Code: typeof Code;
    Decimal128: typeof Decimal128;
    Int32: typeof Int32;
    Long: typeof Long;
    Binary: typeof Binary;
    calculateObjectSize: typeof calculateObjectSize;
    Double: typeof Double;
    EJSON: {
        parse: (text: string, options?: import("bson").EJSONOptions | undefined) => any;
        stringify: (value: any, replacer?: (string | number)[] | import("bson").EJSONOptions | ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined, options?: import("bson").EJSONOptions | undefined) => string;
        serialize: (value: any, options?: import("bson").EJSONOptions | undefined) => import("bson").Document;
        deserialize: (ejson: import("bson").Document, options?: import("bson").EJSONOptions | undefined) => any;
    };
    BSONRegExp: typeof BSONRegExp;
};
export { ServiceProvider, ShellAuthOptions, getConnectInfo, ReplPlatform, DEFAULT_DB, ServiceProviderCore, bson, bsonStringifiers, ConnectInfo };
