"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bsonStringifiers = exports.bson = exports.ServiceProviderCore = exports.DEFAULT_DB = exports.getConnectInfo = void 0;
require("./textencoder-polyfill");
const service_provider_1 = require("./service-provider");
Object.defineProperty(exports, "ServiceProviderCore", { enumerable: true, get: function () { return service_provider_1.ServiceProviderCore; } });
const connect_info_1 = __importDefault(require("./connect-info"));
exports.getConnectInfo = connect_info_1.default;
const DEFAULT_DB = 'test';
exports.DEFAULT_DB = DEFAULT_DB;
const bson_1 = require("bson");
const printable_bson_1 = require("./printable-bson");
Object.defineProperty(exports, "bsonStringifiers", { enumerable: true, get: function () { return printable_bson_1.bsonStringifiers; } });
__exportStar(require("./all-transport-types"), exports);
__exportStar(require("./all-fle-types"), exports);
const bson = {
    ObjectId: bson_1.ObjectId,
    DBRef: bson_1.DBRef,
    MaxKey: bson_1.MaxKey,
    MinKey: bson_1.MinKey,
    Timestamp: bson_1.Timestamp,
    BSONSymbol: bson_1.BSONSymbol,
    Code: bson_1.Code,
    Decimal128: bson_1.Decimal128,
    Int32: bson_1.Int32,
    Long: bson_1.Long,
    Binary: bson_1.Binary,
    calculateObjectSize: bson_1.calculateObjectSize,
    Double: bson_1.Double,
    EJSON: bson_1.EJSON,
    BSONRegExp: bson_1.BSONRegExp
};
exports.bson = bson;
//# sourceMappingURL=index.js.map