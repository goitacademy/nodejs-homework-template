"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel = __importStar(require("@babel/core"));
exports.default = ({ types: t }) => {
    function asNodeKey(v) { return v; }
    const isGeneratedTryCatch = asNodeKey(Symbol('isGeneratedTryCatch'));
    const notUncatchableCheck = babel.template.expression(`
    (!ERR_IDENTIFIER || !ERR_IDENTIFIER[Symbol.for('@@mongosh.uncatchable')])
  `);
    return {
        visitor: {
            TryStatement(path) {
                var _a;
                if (path.node[isGeneratedTryCatch])
                    return;
                const { block, finalizer } = path.node;
                let catchParam;
                let handler;
                const fallbackCatchParam = path.scope.generateUidIdentifier('err');
                if (path.node.handler) {
                    if (((_a = path.node.handler.param) === null || _a === void 0 ? void 0 : _a.type) === 'Identifier') {
                        catchParam = path.node.handler.param;
                        handler = path.node.handler;
                    }
                    else if (path.node.handler.param) {
                        catchParam = fallbackCatchParam;
                        handler = t.catchClause(catchParam, t.blockStatement([
                            t.variableDeclaration('let', [
                                t.variableDeclarator(path.node.handler.param, catchParam)
                            ]),
                            path.node.handler.body
                        ]));
                    }
                    else {
                        catchParam = fallbackCatchParam;
                        handler = path.node.handler;
                    }
                }
                else {
                    catchParam = fallbackCatchParam;
                    handler = t.catchClause(catchParam, t.blockStatement([
                        t.throwStatement(catchParam)
                    ]));
                }
                if (!finalizer) {
                    path.replaceWith(Object.assign(t.tryStatement(block, t.catchClause(catchParam, t.blockStatement([
                        t.ifStatement(notUncatchableCheck({ ERR_IDENTIFIER: catchParam }), handler.body, t.throwStatement(catchParam))
                    ]))), { [isGeneratedTryCatch]: true }));
                }
                else {
                    const isCatchable = path.scope.generateUidIdentifier('_isCatchable');
                    const exceptionFromCatchIdentifier = path.scope.generateUidIdentifier('_innerExc');
                    path.replaceWithMultiple([
                        t.variableDeclaration('let', [t.variableDeclarator(isCatchable, t.booleanLiteral(true))]),
                        Object.assign(t.tryStatement(block, t.catchClause(catchParam, t.blockStatement([
                            t.expressionStatement(t.assignmentExpression('=', isCatchable, notUncatchableCheck({ ERR_IDENTIFIER: catchParam }))),
                            t.ifStatement(isCatchable, Object.assign(t.tryStatement(handler.body, t.catchClause(exceptionFromCatchIdentifier, t.blockStatement([
                                t.expressionStatement(t.assignmentExpression('=', isCatchable, notUncatchableCheck({ ERR_IDENTIFIER: exceptionFromCatchIdentifier }))),
                                t.throwStatement(exceptionFromCatchIdentifier)
                            ]))), { [isGeneratedTryCatch]: true }), t.throwStatement(catchParam))
                        ])), t.blockStatement([
                            t.ifStatement(isCatchable, finalizer)
                        ])), { [isGeneratedTryCatch]: true })
                    ]);
                }
            }
        }
    };
};
//# sourceMappingURL=uncatchable-exceptions.js.map