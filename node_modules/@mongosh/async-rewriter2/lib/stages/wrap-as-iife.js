"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ({ types: t }) => {
    return {
        pre() {
            this.movedStatements = [];
            this.functionDeclarations = [];
            this.hasFinishedMoving = false;
            this.addedCompletionRecords = false;
            this.variables = [];
        },
        visitor: {
            Statement(path) {
                if (this.hasFinishedMoving)
                    return;
                if (path.isDeclaration() && !path.getFunctionParent()) {
                    if (path.isVariableDeclaration()) {
                        if (path.parentPath.isProgram() || path.node.kind === 'var') {
                            const asAssignments = [];
                            for (const decl of path.node.declarations) {
                                this.variables.push(decl.id.name);
                                if (decl.init) {
                                    const expr = t.assignmentExpression('=', decl.id, decl.init);
                                    asAssignments.push(t.variableDeclaration('const', [t.variableDeclarator(path.scope.generateUidIdentifier('v'), expr)]));
                                }
                            }
                            if (path.parentPath.isProgram()) {
                                this.movedStatements.push(...asAssignments);
                                path.remove();
                            }
                            else {
                                path.replaceWithMultiple(asAssignments);
                            }
                            return;
                        }
                    }
                    else if (path.isFunctionDeclaration()) {
                        this.functionDeclarations.push(path.node);
                        if (path.node.id) {
                            path.replaceWith(t.expressionStatement(path.node.id));
                        }
                        else {
                            path.remove();
                        }
                        return;
                    }
                    else if (path.isClassDeclaration() && path.parentPath.isProgram()) {
                        this.variables.push(path.node.id.name);
                        this.movedStatements.push(t.expressionStatement(t.assignmentExpression('=', path.node.id, t.classExpression(path.node.id, path.node.superClass, path.node.body))));
                        path.replaceWith(t.expressionStatement(path.node.id));
                        return;
                    }
                }
                if (path.parentPath.isProgram()) {
                    this.movedStatements.push(path.node);
                }
            },
            Program: {
                enter(path) {
                    if (path.node.directives.length === 1 &&
                        path.node.directives[0].value.type === 'DirectiveLiteral' &&
                        path.node.body.length === 0) {
                        path.replaceWith(t.program([
                            t.expressionStatement({ ...path.node.directives[0].value, type: 'StringLiteral' })
                        ]));
                    }
                },
                exit(path) {
                    if (this.hasFinishedMoving)
                        return;
                    this.hasFinishedMoving = true;
                    this.completionRecordId = path.scope.generateUidIdentifier('cr');
                    this.movedStatements.unshift(t.variableDeclaration('var', [t.variableDeclarator(this.completionRecordId)]));
                    path.replaceWith(t.program([
                        ...this.variables.map(v => t.variableDeclaration('var', [t.variableDeclarator(t.identifier(v))])),
                        ...this.functionDeclarations,
                        t.expressionStatement(t.callExpression(t.arrowFunctionExpression([], t.blockStatement(this.movedStatements)), []))
                    ], path.node.directives));
                }
            },
            BlockStatement: {
                exit(path) {
                    if (!this.hasFinishedMoving)
                        return;
                    if (!path.parentPath.isArrowFunctionExpression())
                        return;
                    if (path.parentPath.getFunctionParent())
                        return;
                    if (this.addedCompletionRecords)
                        return;
                    this.addedCompletionRecords = true;
                    const records = path.getCompletionRecords();
                    for (const record of records) {
                        if (record.isExpressionWrapper()) {
                            record.replaceWith(t.expressionStatement(t.assignmentExpression('=', this.completionRecordId, record.node.expression)));
                        }
                    }
                    path.replaceWith(t.blockStatement([
                        ...path.node.body,
                        t.returnStatement(this.completionRecordId)
                    ]));
                }
            }
        }
    };
};
//# sourceMappingURL=wrap-as-iife.js.map