import type { ConnectEventMap } from '@mongodb-js/devtools-connect';
export interface ApiEventArguments {
    pipeline?: any[];
    query?: object;
    options?: object;
    filter?: object;
}
export interface ApiEventWithArguments {
    method: string;
    class?: string;
    db?: string;
    coll?: string;
    uri?: string;
    arguments?: ApiEventArguments;
}
export interface ApiEvent {
    method: string;
    class: string;
    deprecated: boolean;
    isAsync: boolean;
    callDepth: number;
}
export interface ApiWarning {
    method: string;
    class: string;
    message: string;
}
export interface UseEvent {
    db: string;
}
export interface EvaluateInputEvent {
    input: string;
}
export interface ShowEvent {
    method: string;
}
export interface ConnectEvent {
    is_atlas: boolean;
    is_localhost: boolean;
    is_do: boolean;
    server_version: string;
    server_os?: string;
    server_arch?: string;
    is_enterprise: boolean;
    auth_type?: string;
    is_data_federation: boolean;
    dl_version?: string;
    is_genuine: boolean;
    non_genuine_server_name: string;
    api_version?: string;
    api_strict?: boolean;
    api_deprecation_errors?: boolean;
    node_version: string;
    uri: string;
}
export interface ScriptLoadFileEvent {
    nested: boolean;
    filename: string;
}
export interface StartLoadingCliScriptsEvent {
    usesShellOption: boolean;
}
export interface GlobalConfigFileLoadEvent {
    filename: string;
    found: boolean;
}
export interface CryptLibrarySkipEvent {
    cryptSharedLibPath: string;
    reason: string;
    details?: any;
}
export interface CryptLibraryFoundEvent {
    cryptSharedLibPath: string;
    expectedVersion: {
        versionStr: string;
    };
}
export interface MongocryptdLogEvent {
    pid: number;
    logEntry: any;
}
export interface StartMongoshReplEvent {
    version: string;
}
export interface SnippetsLoadedEvent {
    installdir: string;
}
export interface SnippetsNpmLookupEvent {
    existingVersion: string;
}
export interface SnippetsNpmDownloadActiveEvent {
    npmMetadataURL: string;
    npmTarballURL: string;
}
export interface SnippetsNpmDownloadFailedEvent {
    npmMetadataURL: string;
    npmTarballURL?: string;
    status?: number;
}
export interface SnippetsFetchIndexEvent {
    refreshMode: string;
}
export interface SnippetsFetchIndexErrorEvent {
    action: string;
    url?: string;
    status?: number;
    error?: string;
}
export interface SnippetsErrorEvent {
    error: string;
}
export interface SnippetsRunNpmEvent {
    args: string[];
}
export interface SnippetsLoadSnippetEvent {
    source: string;
    name: string;
}
export interface SnippetsCommandEvent {
    args: string[];
}
export interface SnippetsTransformErrorEvent {
    error: string;
    addition: string;
    name: string;
}
export interface EditorRunEditCommandEvent {
    tmpDoc: string;
    editor: string;
    code: string;
}
export interface EditorReadVscodeExtensionsDoneEvent {
    vscodeDir: string;
    hasMongodbExtension: boolean;
}
export interface EditorReadVscodeExtensionsFailedEvent {
    vscodeDir: string;
    error: Error;
}
export interface MongoshBusEventsMap extends ConnectEventMap {
    'mongosh:connect': (ev: ConnectEvent) => void;
    'mongosh:new-user': (identity: {
        userId: string;
        anonymousId: string;
    }) => void;
    'mongosh:update-user': (identity: {
        userId: string;
        anonymousId?: string;
    }) => void;
    'mongosh:error': (error: Error, component: string) => void;
    'mongosh:evaluate-input': (ev: EvaluateInputEvent) => void;
    'mongosh:evaluate-started': () => void;
    'mongosh:evaluate-finished': () => void;
    'mongosh:use': (ev: UseEvent) => void;
    'mongosh:getDB': (ev: UseEvent) => void;
    'mongosh:show': (ev: ShowEvent) => void;
    'mongosh:setCtx': (ev: ApiEventWithArguments) => void;
    'mongosh:api-call-with-arguments': (ev: ApiEventWithArguments) => void;
    'mongosh:api-call': (ev: ApiEvent) => void;
    'mongosh:warn': (ev: ApiWarning) => void;
    'mongosh:api-load-file': (ev: ScriptLoadFileEvent) => void;
    'mongosh:start-loading-cli-scripts': (event: StartLoadingCliScriptsEvent) => void;
    'mongosh:start-mongosh-repl': (ev: StartMongoshReplEvent) => void;
    'mongosh:mongoshrc-load': () => void;
    'mongosh:globalconfig-load': (ev: GlobalConfigFileLoadEvent) => void;
    'mongosh:mongoshrc-mongorc-warn': () => void;
    'mongosh:eval-cli-script': () => void;
    'mongosh:eval-interrupted': () => void;
    'mongosh:crypt-library-load-skip': (ev: CryptLibrarySkipEvent) => void;
    'mongosh:crypt-library-load-found': (ev: CryptLibraryFoundEvent) => void;
    'mongosh:closed': () => void;
    'mongosh:eval-complete': () => void;
    'mongosh:autocompletion-complete': () => void;
    'mongosh:interrupt-complete': () => void;
    'mongosh-snippets:loaded': (ev: SnippetsLoadedEvent) => void;
    'mongosh-snippets:npm-lookup': (ev: SnippetsNpmLookupEvent) => void;
    'mongosh-snippets:npm-lookup-stopped': () => void;
    'mongosh-snippets:npm-download-failed': (ev: SnippetsNpmDownloadFailedEvent) => void;
    'mongosh-snippets:npm-download-active': (ev: SnippetsNpmDownloadActiveEvent) => void;
    'mongosh-snippets:fetch-index': (ev: SnippetsFetchIndexEvent) => void;
    'mongosh-snippets:fetch-cache-invalid': () => void;
    'mongosh-snippets:fetch-index-error': (ev: SnippetsFetchIndexErrorEvent) => void;
    'mongosh-snippets:fetch-index-done': () => void;
    'mongosh-snippets:package-json-edit-error': (ev: SnippetsErrorEvent) => void;
    'mongosh-snippets:spawn-child': (ev: SnippetsRunNpmEvent) => void;
    'mongosh-snippets:load-snippet': (ev: SnippetsLoadSnippetEvent) => void;
    'mongosh-snippets:snippet-command': (ev: SnippetsCommandEvent) => void;
    'mongosh-snippets:transform-error': (ev: SnippetsTransformErrorEvent) => void;
    'mongosh-sp:reset-connection-options': () => void;
    'mongosh-editor:run-edit-command': (ev: EditorRunEditCommandEvent) => void;
    'mongosh-editor:read-vscode-extensions-done': (ev: EditorReadVscodeExtensionsDoneEvent) => void;
    'mongosh-editor:read-vscode-extensions-failed': (ev: EditorReadVscodeExtensionsFailedEvent) => void;
}
export interface MongoshBus {
    on<K extends keyof MongoshBusEventsMap>(event: K, listener: MongoshBusEventsMap[K]): this;
    once<K extends keyof MongoshBusEventsMap>(event: K, listener: MongoshBusEventsMap[K]): this;
    emit<K extends keyof MongoshBusEventsMap>(event: K, ...args: MongoshBusEventsMap[K] extends (...args: infer P) => any ? P : never): unknown;
}
export declare class ShellUserConfig {
    displayBatchSize: number;
    maxTimeMS: number | null;
    enableTelemetry: boolean;
    editor: string | null;
}
export declare class ShellUserConfigValidator {
    static validate<K extends keyof ShellUserConfig>(key: K, value: ShellUserConfig[K]): Promise<string | null>;
}
export declare class SnippetShellUserConfig extends ShellUserConfig {
    snippetIndexSourceURLs: string;
    snippetRegistryURL: string;
    snippetAutoload: boolean;
}
export declare class SnippetShellUserConfigValidator extends ShellUserConfigValidator {
    static validate<K extends keyof SnippetShellUserConfig>(key: K, value: SnippetShellUserConfig[K]): Promise<string | null>;
}
export declare class CliUserConfig extends SnippetShellUserConfig {
    userId: string;
    telemetryAnonymousId: string;
    disableGreetingMessage: boolean;
    forceDisableTelemetry: boolean;
    inspectCompact: number | boolean;
    inspectDepth: number;
    historyLength: number;
    showStackTraces: boolean;
    redactHistory: 'keep' | 'remove' | 'remove-redact';
    oidcRedirectURI: undefined | string;
    oidcTrustedEndpoints: undefined | string[];
    browser: undefined | false | string;
}
export declare class CliUserConfigValidator extends SnippetShellUserConfigValidator {
    static validate<K extends keyof CliUserConfig>(key: K, value: CliUserConfig[K]): Promise<string | null>;
}
export interface ConfigProvider<T> {
    getConfig<K extends keyof T>(key: K): Promise<T[K]>;
    setConfig<K extends keyof T>(key: K, value: T[K]): Promise<'success' | 'ignored'>;
    resetConfig<K extends keyof T>(key: K): Promise<'success' | 'ignored'>;
    validateConfig<K extends keyof T>(key: K, value: T[K]): Promise<string | null>;
    listConfigOptions(): string[] | Promise<string[]>;
}
