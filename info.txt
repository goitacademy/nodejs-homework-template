contacts-controller.js

Цей код створює модуль для обробки HTTP-запитів, пов'язаних з контактами. Він використовується,
в додатку або серверному додатку для управління списком контактів. Кожна функція обробки запиту
виконує певну операцію з контактами і повертає результат у формі JSON-відповіді. Основні 
функції, які реалізовані в цьому коді, включають:
getAllContacts: Ця функція отримує всі контакти, викликаючи contactsService.listContacts(), 
і повертає їх у відповіді у форматі JSON.
getContactById: Ця функція отримує контакт за його ідентифікатором (який передається 
через параметри запиту), викликаючи contactsService.getContactById(id). Якщо контакт не 
знайдено, вона генерує помилку 404 "Not Found". В іншому випадку, вона повертає знайдений 
контакт у форматі JSON.
addContact: Ця функція додає новий контакт на основі даних, які передаються через тіло запиту 
(req.body), викликаючи contactsService.addContact(body). Після додавання контакту вона повертає
його у відповіді з HTTP-статусом 201 "Created".
updateContact: Ця функція оновлює існуючий контакт за його ідентифікатором (який передається 
через параметри запиту) на основі даних, які передаються через тіло запиту (req.body), 
викликаючи contactsService.updateContact(id, body). Якщо контакт не знайдено, вона генерує 
помилку 404 "Not Found". В іншому випадку, вона повертає оновлений контакт у форматі JSON.
removeContact: Ця функція видаляє контакт за його ідентифікатором (який передається через 
параметри запиту), викликаючи contactsService.removeContact(id). Якщо контакт не знайдено,
вона генерує помилку 404 "Not Found". В іншому випадку, вона повертає об'єкт JSON з
повідомленням про видалення контакту.

ctrlWrapper.js

Цей код експортує функцію ctrlWrapper, яка є функціональним обгорткою (wrapper) для обробників 
запитів (controllers) у контексті веб-додатка, що використовує популярний підхід до обробки 
помилок в асинхронному коді з використанням async/await та конструкції try...catch.
Основна мета ctrlWrapper - обробляти помилки, які можуть виникнути під час виконання обробника 
запиту (ctrl), і передавати їх далі до обробника помилок (middleware next(error)), що обробляє 
помилки відповідно до логіки веб-додатка.
Ось як він працює:
ctrlWrapper отримує обробник запиту ctrl як аргумент. Внутрішня функція func приймає параметри 
req, res, і next, а також є асинхронною (async). У func виконується обробник запиту ctrl, 
використовуючи await ctrl(req, res, next). Якщо обробник запиту завершується успішно, то 
програма перейде до наступних обробників (middleware). Якщо в обробнику запиту виникає помилка 
(наприклад, через викидання винятку), то вона перехоплюється конструкцією try...catch. 
Помилка передається об'єкту next(error), що передає її до наступного обробника помилок 
(або глобального обробника помилок), де можна обробити цю помилку відповідним чином.
Цей підхід спрощує роботу з асинхронним кодом та обробку помилок у контролерах 
(обробниках запитів) у веб-додатку, роблячи їх більш читабельними і підтримуваними.

validateBody.js

Цей код експортує функцію validateBody, яка є middleware (проміжним обробником) для 
веб-додатків Node.js. Мета цього middleware - перевірити, чи відповідає тіло HTTP-запиту 
певній схемі (schema) за допомогою бібліотеки або пакету для перевірки валідності даних 
(наприклад, Joi).
Основна логіка validateBody така:
Вона отримує схему (schema) як аргумент. Ця схема зазвичай використовується для визначення 
очікуваного формату та валідності даних у тілі HTTP-запиту.
func - це функція, яка приймає параметри req, res, і next. Це типова сигнатура middleware в 
Express.js.
У func, викликається schema.validate(req.body), де req.body - це тіло HTTP-запиту. 
Метод validate схеми визначає, чи відповідає тіло запиту вимогам схеми.
Якщо error не дорівнює null, це означає, що дані у тілі запиту не відповідають схемі, і 
генерується помилка з HTTP-статусом 400 "Bad Request". Текст помилки приймається з повідомлення
про помилку, яке генерує schema.validate.
Після перевірки тіла запиту, незалежно від того, чи є помилка, викликається next(),
щоб перейти до наступного middleware в стеку обробників або обробника запиту.
Отже, validateBody використовується для перевірки валідності даних у тілі HTTP-запиту 
перед обробкою запиту. Це допомагає забезпечити безпеку та правильну обробку даних на сервері, 
а також спрощує роботу з валідацією даних в Express.js додатках.

HttpError.js 

Цей код визначає дві функції для створення об'єктів помилок HTTP (HttpError) та масиву 
повідомлень про помилки для різних статусів HTTP.
errorMessages: Це об'єкт, який містить повідомлення про помилки для різних статусів HTTP. 
Наприклад, для статусу 400 (Bad Request) повідомлення "Bad Request", для статусу 401 
(Unauthorized) - "Unauthorized", і так далі.
HttpError: Це функція, яка приймає два аргументи: status і необов'язковий message. 
Вона створює новий об'єкт помилки з переданим повідомленням (або використовує повідомлення з
errorMessages, якщо message не вказано). Після цього, функція встановлює властивість status 
об'єкта помилки на переданий статус і повертає цей об'єкт помилки.
Цей код зручно використовувати для генерації помилок HTTP з визначеними повідомленнями про 
помилки та відповідними статусами. 
Цей підхід допомагає створювати об'єкти помилок HTTP зі стандартизованими повідомленнями 
та статусами для використання у веб-додатках та API.

models/contacts.js 

Цей код визначає ряд функцій, які взаємодіють із файлом "contacts.json" для управління 
списком контактів. Ці функції дозволяють читати, оновлювати, додавати та видаляти контакти 
в цьому списку. Ось опис, що робить кожна функція:
updateContacts(contacts): Ця функція отримує список контактів contacts і оновлює файл 
"contacts.json", перезаписуючи його зміст на основі цього списку. Використовується асинхронний
запис файлу.
listContacts(): Ця функція асинхронно читає вміст файлу "contacts.json" та повертає його у 
вигляді списку об'єктів контактів.
getContactById(id): Ця функція приймає ідентифікатор контакту id, отримує список контактів, 
і шукає контакт з вказаним ідентифікатором. Якщо контакт знайдений, він повертається, 
в іншому випадку повертається null.
removeContact(id): Ця функція видаляє контакт з вказаним ідентифікатором id зі списку 
контактів. Якщо контакт знайдений і видалений успішно, функція повертає видалений контакт, 
в іншому випадку повертається null.
addContact(body): Ця функція додає новий контакт на основі даних, які передаються в об'єкті 
body. Генерується новий ідентифікатор для контакту за допомогою randomUUID(), додається 
новий контакт до списку контактів і оновлюється файл "contacts.json". Потім повертається 
доданий контакт.
updateContact(id, body): Ця функція оновлює існуючий контакт з вказаним ідентифікатором id 
на основі даних, які передаються в об'єкті body. Шукає контакт за ідентифікатором, оновлює 
його зміст і оновлює файл "contacts.json". Потім повертає оновлений контакт.

routes/api/contacts.js

Основні дії, які цей код виконує, включають:
Підключення необхідних модулів та файлів, таких як express, contactsController, schemas, і 
validateBody.
Створення об'єкта router з допомогою express.Router() для визначення маршрутів.
Визначення різних HTTP-маршрутів для обробки операцій з контактами:
GET /: Викликає contactsController.getAllContacts, що, повертає список всіх контактів.
GET /:id: Викликає contactsController.getContactById, що, повертає контакт за вказаним id.
POST /: Викликає validateBody(schemas.contactAddSchema) для перевірки даних запиту, а 
потім викликає contactsController.addContact, що, додає новий контакт.
DELETE /:id: Викликає contactsController.removeContact, що, видаляє контакт за вказаним id.
PUT /:id: Викликає validateBody(schemas.contactAddSchema) для перевірки даних запиту, а 
потім викликає contactsController.updateContact, що, оновлює контакт за вказаним id.
Цей код дозволяє налаштувати API для роботи з контактами, забезпечуючи можливість отримання,
створення, оновлення та видалення контактів через відповідні HTTP-запити.

schemas/contacts-schemas.js

Цей код виконує наступні дії:
Вимагається модуль Joi, який є бібліотекою для валідації даних в JavaScript.
Визначає схему валідації даних для додавання нового контакту. Схема включає наступні 
правила для полів контакту:
name: Валідує текстове поле з іменем, яке має містити від 3 до 30 символів, може містити 
літери, апостроф, тире і пробіли. Це поле є обов'язковим.
email: Валідує текстове поле з електронною поштою, яке повинно бути правильним адресою 
електронної пошти. Це поле є обов'язковим.
phone: Валідує текстове поле з номером телефону, яке повинно відповідати певному шаблону. 
Цей шаблон допускає номери телефонів, які можуть містити цифри, пробіли, тире, дужки і можуть 
починатися з "+". Це поле є обов'язковим.
Для кожного полів встановлені власні повідомлення про помилки, які будуть виведені у випадку,
якщо дані не відповідають валідаційним правилам.
Створюється об'єкт contactAddSchema, який містить визначену схему валідації.
Цей код дозволяє визначити, як мають виглядати та валідуватися дані при додаванні нового 
контакту у додаток, і він може бути використаний для перевірки вхідних даних перед їх обробкою 
у вашому додатку.